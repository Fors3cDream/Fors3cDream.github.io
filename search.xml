<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python复习--字典</title>
      <link href="ckm0nmi920003h7x95jpx5a1t.html"/>
      <url>ckm0nmi920003h7x95jpx5a1t.html</url>
      
        <content type="html"><![CDATA[<p>dict（字典）类型是Python语言的基石。在模块的命名空间、实例的属性和函数的关键字参数之中都可以看到字典的身影。与字典有关的内置函数都在__builtins__.__dict__模块中。<em>散列表</em>是字典类型性能出众的根本原因。</p><p>set（集合）类型的实现其实也是依赖于散列表。</p><p>想要进一步理解集合和字典，就得先理解散列表的原理。</p><h4 id="泛型映射类型"><a href="#泛型映射类型" class="headerlink" title="泛型映射类型"></a>泛型映射类型</h4><p>collections.abc模块中的Mapping和MutableMapping两个抽象基类，为dict和其他类似的类型定义形式接口。</p><p>非抽象映射类型一般不会直接继承这些抽象基类，而会直接对dict或是collections.UserDict进行扩展。这些抽象基类的主要作用定义了一个映射类型所需要的的最基本的接口。还能跟isinstance一起被用于判断某个数据是不是广义上的映射类型。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dict = {}</span><br><span class="line"><span class="built_in">isinstance</span>(my_dict, abc.Mapping) <span class="comment"># 返回 True</span></span><br></pre></td></tr></tbody></table></figure><p>映射类型都由一个共同的限制，只有<b>可散列</b>的数据类型才能用作映射里的键。</p><h4 id="字典推导（dictcmop"><a href="#字典推导（dictcmop" class="headerlink" title="字典推导（dictcmop)"></a>字典推导（dictcmop)</h4><p><b>字典推导</b>可以用来建造新dict，可以从任何以键值对作为元素的可迭代对象中构建新字典。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以数为元组的列表生成字典</span></span><br><span class="line"></span><br><span class="line">DIAL_CODES = [(<span class="number">86</span>, <span class="string">'China'</span>), (<span class="number">91</span>, <span class="string">'India'</span>),</span><br><span class="line">              (<span class="number">1</span>, <span class="string">'United States'</span>), (<span class="number">62</span>, <span class="string">'Indonesia'</span>)]</span><br><span class="line"></span><br><span class="line">country_code = {country: code <span class="keyword">for</span> code, country <span class="keyword">in</span> DIAL_CODES}</span><br><span class="line"></span><br><span class="line"><span class="comment"># country_code = {'China': 86, ...}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="用setdefault处理找不到的键"><a href="#用setdefault处理找不到的键" class="headerlink" title="用setdefault处理找不到的键"></a>用setdefault处理找不到的键</h4><p>当字典d[k]不能找到正确的键的时候，会抛出异常。这时候可以使用d.get(k, default)来代替d[k]，给找不到的键一个默认的返回值。但是要更新某个键对应的值的时候，不管使用__getitem__还是get都会不自然，并且效率很低。dict.get并不是处理找不到的键的最好方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">WORD_RE = re.<span class="built_in">compile</span>(<span class="string">r'\w+'</span>)</span><br><span class="line"></span><br><span class="line">index = {}</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="keyword">for</span> index, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(fp, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> match <span class="keyword">in</span> WORD_RE.finditer(line):</span><br><span class="line">            word = match.group()</span><br><span class="line">            column_no = match.start()+<span class="number">1</span></span><br><span class="line">            <span class="comment"># 记录所出现的行和列</span></span><br><span class="line">            location = (index, column_no)</span><br><span class="line">            <span class="comment"># 使用get实现</span></span><br><span class="line">            <span class="comment"># occurrences = index.get(word, []) # 如果没有找到，返回[]</span></span><br><span class="line">            <span class="comment"># occurrences.append(location)</span></span><br><span class="line">            <span class="comment"># index[word] = occurrences</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用setdefault一行代码实现</span></span><br><span class="line">            index.setdefault(word, []).append(location)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以字母顺序进行打印</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> <span class="built_in">sorted</span>(index, key=<span class="built_in">str</span>.upper):</span><br><span class="line">    print(word, index[word])</span><br></pre></td></tr></tbody></table></figure><h4 id="映射的弹性查询"><a href="#映射的弹性查询" class="headerlink" title="映射的弹性查询"></a>映射的弹性查询</h4><p>有时候为了方便，就算某个键在映射里不存在，开发者也希望能通过这个键读取值的时候能得到一个默认值。有两种方法可以达到这个目的，一个是通过defaultdict这个类型而不是普通的dict，另一个是自定义一个dict子类，然后在子类中实现__missing__方法。</p><h5 id="defaultdict：处理找不到键的一个选择"><a href="#defaultdict：处理找不到键的一个选择" class="headerlink" title="defaultdict：处理找不到键的一个选择"></a>defaultdict：处理找不到键的一个选择</h5><p>用户在创建defaultdict对象的时候，就需要给它配置一个找不到键的时候返回的默认值的方法。</p><p>具体来说，在实例化一个defaultdict的时候，需要给构造方法提供一个可调用对象，这个对象会在__getitem__找不到键的时候被调用，返回某种默认值。</p><p>比如，在新建一个字典，dd=defaultdict(list)，如果键’new-key’在dd中不存在的话，dd[‘new-key’]会进行如下的操作：</p><ol><li>调用list()来建立一个新列表。</li><li>新列表作为值，’new-key’作为键，放入dd中。</li><li>返回这个列表的引用。</li></ol><p>这个用来生成新默认值的可调用对象存放在名为default_factory的实例属性中。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">WORD_RE = re.<span class="built_in">compile</span>(<span class="string">r'\w+'</span>)</span><br><span class="line"></span><br><span class="line">index = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="keyword">for</span> index, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(fp, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> match <span class="keyword">in</span> WORD_RE.finditer(line):</span><br><span class="line">            word = match.group()</span><br><span class="line">            column_no = match.start() + <span class="number">1</span></span><br><span class="line">            location = (index, column_no)</span><br><span class="line">            index[word].append(location)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以字母顺序进行打印</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> <span class="built_in">sorted</span>(index, key=<span class="built_in">str</span>.upper):</span><br><span class="line">    print(word, index[word])</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新坑开挖-Go</title>
      <link href="ckm0nmi98000ch7x9d7cu124i.html"/>
      <url>ckm0nmi98000ch7x9d7cu124i.html</url>
      
        <content type="html"><![CDATA[<h4 id="典型的Go文件布局"><a href="#典型的Go文件布局" class="headerlink" title="典型的Go文件布局"></a>典型的Go文件布局</h4><p>任何的Go语言文件布局，一般按如下三部分：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package子句 </span></span><br><span class="line"><span class="keyword">package</span> package_name</span><br><span class="line"></span><br><span class="line"><span class="comment">// import - 导入包部分</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"Hello, Go!"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><p>要调用函数(必要时候还需要带上包名)，需要输入函数名，以及一对圆括号。如下所示：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println()</span><br></pre></td></tr></tbody></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是一系列字节，通常表示文本字符。在代码中直接使用字符串字面量来定义字符串：双引号之间的文本，Go会把其视为字符串。在字符串中，换行符、制表符和其他难以包含在程序代码中的字符可以用转义字符来表示：反斜杠后跟表示另一个字符的字符。</p><table><thead><tr><th align="center">转义序列</th><th align="left">值</th></tr></thead><tbody><tr><td align="center">\n</td><td align="left">换行符</td></tr><tr><td align="center">\t</td><td align="left">制表符</td></tr><tr><td align="center">"</td><td align="left">双引号</td></tr><tr><td align="center">\</td><td align="left">反斜杠</td></tr></tbody></table><h4 id="符文-rune"><a href="#符文-rune" class="headerlink" title="符文(rune)"></a>符文(rune)</h4><p>字符串通常用于表示一系列文本字符，而在Go语言中，（rune）符文则用于表示单个字符。</p><p>字符串字面量由双引号(“)包围，但rune字面量由单引号(‘)包围。</p><p>在Go程序中可以使用任何语言的任何字符，因为Go语言使用Unicode标准来存储rune。rune被保存为数字代码，而不是字符本身，比如把rune传递给fmt.Println函数，输出的值卫视数字代码，而不是原始字符的值。</p><p>在rune中，转义序列（通过数字代码，如\t -&gt; 9, \n -&gt; 10, \ -&gt; 92）也可以用在rune字面量中，用来表示程序难以包含的字符。</p><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>布尔值只能有两个值之中的一个：true或false。对于条件语句特别有用，条件语句只有在条件为true或false时才会导致代码段运行。</p><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>可以直接在代码中定义数字，比字符串字面量更简单，只需要输入数字即可。</p><h4 id="数学运算于比较"><a href="#数学运算于比较" class="headerlink" title="数学运算于比较"></a>数学运算于比较</h4><p>Go的基本数学运算符的工作方式与大多数其他编程语言一样。’+’表示加法，’-‘表示减法，’*’表示乘法，’/‘表示除法。</p><p>‘&lt;’和’&gt;’可以用来比较两个值，看看其中一个值是否小于或大于另一个值。’==’用于判断两个值是否相等，’!=’则是查看两个值是否不相等。’&lt;=’和’&gt;=’是用于测试第二个值是否小于或等于或者大于或等于第一个值。</p><p>比较的结果只有一个，true或false。</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>通过reflect包中的TypeOf方法可以判断一个字面量的类型。</p><p>常见的类型及用途如下：</p><table><thead><tr><th align="center">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">int</td><td align="left">整型。保存数字。</td></tr><tr><td align="center">float64</td><td align="left">浮点数。保存带小数部分的数字（类型名中的64表示使用64位的数据来保存数字）。</td></tr><tr><td align="center">bool</td><td align="left">布尔值。只能是true或false。</td></tr><tr><td align="center">string</td><td align="left">字符串。通常表示文本字符的一系列数据。</td></tr></tbody></table><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p>Go语言中，变量是包含值的一块存储。可以使用变声明为变量命名。只需要使用var关键字，后面跟上变量的名称以及变量保存的值的类型。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var -&gt; 关键字</span></span><br><span class="line"><span class="comment">// quantity -&gt; 变量名</span></span><br><span class="line"><span class="comment">// int -&gt; 变量类型</span></span><br><span class="line"><span class="keyword">var</span> quantity <span class="keyword">int</span></span><br></pre></td></tr></tbody></table></figure><p>一旦声明了变量，就可以使用’=’为它分配该类型的任何值。</p><p>可以再同一语句中为多个变量赋值。只需将多个变量名放在’=’的左侧，将相同数量的值放在右侧，并使用’,’分隔。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length, width = <span class="number">1.2</span>, <span class="number">2.4</span> <span class="comment">// 一次为多个变量赋值</span></span><br></pre></td></tr></tbody></table></figure><p>一旦给变量赋值以后，就可以在任何要使用原始值的上下文中使用它们，示例代码如下：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// 声明变量</span></span><br><span class="line">    <span class="keyword">var</span> quantity <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> length, width <span class="keyword">float64</span></span><br><span class="line">    <span class="keyword">var</span> customerName <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给变量赋值</span></span><br><span class="line">    quantity = <span class="number">4</span></span><br><span class="line">    length, width = <span class="number">1.2</span>, <span class="number">2.4</span></span><br><span class="line">    customerName = <span class="string">"Damon Cole"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用变量</span></span><br><span class="line">    fmt.Println(customerName)</span><br><span class="line">    fmt.Println(<span class="string">"has ordered"</span>, quantity, <span class="string">"sheets"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"each with an area of"</span>)</span><br><span class="line">    fmt.Println(length*width, <span class="string">"square meters"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果事先知道变量的值是什么，可以声明变量并一同赋值。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="keyword">var</span> quantity <span class="keyword">int</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> length, width <span class="keyword">float64</span> = <span class="number">1.2</span>, <span class="number">2.4</span></span><br><span class="line"><span class="keyword">var</span> customerName <span class="keyword">string</span> = <span class="string">"Damon Cole"</span></span><br></pre></td></tr></tbody></table></figure><p>为变量赋新值时必须是相同类型的值。Go的静态类型确保开发者不会意外地将错误类型的值赋给变量。</p><p>如果在声明变量的同时为其赋值，通常可以在声明中省略变量类型。分配给变量的值的类型将会自动作为该变量的类型。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略变量类型</span></span><br><span class="line"><span class="keyword">var</span> quantity = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> length, width = <span class="number">1.2</span>, <span class="number">2.4</span></span><br><span class="line"><span class="keyword">var</span> customerName = <span class="string">"Damon Cole"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h4><p>如果声明一个变量而没有赋值，那么该变量将包含其类型的零值。对于数值类型的变量，零值就是0。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myInt <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> myFloat <span class="keyword">float64</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* int、float64变量的零值就是 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>对于其他类型来说，0值是无效的，因此该类型的零值可能是其他值。比如，字符串变量的零值就是空字符串，布尔变量的零值就是false。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string变量的零值是空字符串</span></span><br><span class="line"><span class="keyword">var</span> myString <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool变量的零值是false</span></span><br><span class="line"><span class="keyword">var</span> myBool <span class="keyword">bool</span></span><br></pre></td></tr></tbody></table></figure><h4 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h4><p>前面提到过，可以声明变量并在同一行上为其赋值：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="keyword">var</span> quantity <span class="keyword">int</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> length, width <span class="keyword">float64</span> = <span class="number">1.2</span>, <span class="number">2.4</span></span><br><span class="line"><span class="keyword">var</span> customerName <span class="keyword">string</span> = <span class="string">"Damon Cole"</span></span><br></pre></td></tr></tbody></table></figure><p>但是，如果在声明变量时就知道它的初始值是什么，那么更具有代表性的是使用短变量声明。不必很明确地声明变量的类型并在之后使用 “=” 为其赋值，而是同时使用”:=”。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// 声明变量并赋值</span></span><br><span class="line">    quantity := <span class="number">4</span></span><br><span class="line">    length, width := <span class="number">1.2</span>, <span class="number">2</span>,<span class="number">4</span></span><br><span class="line">    customerName := <span class="string">"Damon Cole"</span></span><br><span class="line"></span><br><span class="line">    fmt.Print(customerName)</span><br><span class="line">    fmt.Println(<span class="string">"has ordered"</span>, quantity, <span class="string">"sheets"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"each with an area of"</span>)</span><br><span class="line">    fmt.Println(length*width, <span class="string">"square meters"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>不需要明确地声明变量的类型；赋值给变量的值的类型成为该变量的类型。短变量声明非常方便和简洁，因此比常规声明更常用。</p><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p>Go中的数学运算和比较运算要求包含的值具有相同的类型。如果不是的话，则在尝试运行时代码会报错。</p><p>为变量分配新值也是如此。如果所赋值的类型与变量的声明类型不匹配，也会报错。</p><p>解决方法是使用转换，它允许将一种类型转换为另一种类型。只需要提供要将值转换成的类型，后面紧跟着是在圆括号中的要转换的值。结果是所需类型的新值。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换int到float64</span></span><br><span class="line"><span class="keyword">var</span> myInt <span class="keyword">int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">float64</span>(myInt)</span><br></pre></td></tr></tbody></table></figure><p>注意，在进行转换时坑你会更改结果值。例如，float64变量可以存储小数值，但是int变量不能。当将float64转换为int时，小数部分会被简单地删除。</p><h4 id="Go命名规则"><a href="#Go命名规则" class="headerlink" title="Go命名规则"></a>Go命名规则</h4><p>Go语言有一套简单的规则，适用于变量、函数和类型的名称：</p><ul><li>名称必须以字母开头，并且可以有任意数量的额外的字母和数字。</li><li>如果变量、函数或类型的名称以大写字母开头，则认为它是可导出的，可以从当前包之外的包访问它。如果是以小写字母开头的，则认为该名称是未导出的，只能在当前包中使用。</li><li>如果一个名称由多个单词组成，那么第一个单词之后的每个单词都应该首字母大写，并且单词应该连接在一起，中间没有其他连接符，如topPrice、RetryConnection等。</li></ul><h4 id="编译与运行Go代码"><a href="#编译与运行Go代码" class="headerlink" title="编译与运行Go代码"></a>编译与运行Go代码</h4><p>计算机不能直接运行Go代码。在运行之前，需要获取源代码文件并进行编译，将其转换为CPU可以执行的二进制格式。</p><p>go fmt xx.go –&gt; 整理代码格式<br>go build xx.go –&gt; 编译源代码<br>go run xx.go –&gt; 快速运行代码，但不进行编译</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Lists复习</title>
      <link href="ckm0nmi940005h7x9g3d4cz32.html"/>
      <url>ckm0nmi940005h7x9g3d4cz32.html</url>
      
        <content type="html"><![CDATA[<h4 id="什么是Lists（列表）"><a href="#什么是Lists（列表）" class="headerlink" title="什么是Lists（列表）"></a>什么是Lists（列表）</h4><p><b>列表：</b>以特定的顺序存储一系列数据。不管数据量是只有几个还是成千上万个，列表都在将数据存储在同一个地方。列表是重要的基础数据结构。</p><h5 id="定义一个列表"><a href="#定义一个列表" class="headerlink" title="定义一个列表"></a>定义一个列表</h5><p>一般通过”[]”来定义一个列表，在列表中用”,”分割数据。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 定义并初始化一个列表</span><br><span class="line">users = ['val', 'bob', 'mia', 'ron', 'ned']</span><br></pre></td></tr></tbody></table></figure><h5 id="访问列表中的数据"><a href="#访问列表中的数据" class="headerlink" title="访问列表中的数据"></a>访问列表中的数据</h5><p>列表中的书可以通过位置来进行访问，也就是通过数据在列表中的索引来访问。索引值是从0开始的。负的索引值是从列表结尾开始计算的，“-1”是最后一个数据。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取第一个数据</span><br><span class="line">first_user = users[0]</span><br><span class="line"></span><br><span class="line"># 获取最后一个数据</span><br><span class="line">last_user = users[-1]</span><br></pre></td></tr></tbody></table></figure><h5 id="修改列表中的数据"><a href="#修改列表中的数据" class="headerlink" title="修改列表中的数据"></a>修改列表中的数据</h5><p>直接通过赋值的方式来进行修改，通过“列表名[索引值]=更新值”的方式来修改。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user[0] = 'valerie'</span><br><span class="line">users[-2] = 'ronald'</span><br></pre></td></tr></tbody></table></figure><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><p>可通过append向列表中添加一个数据到列表中，也可以通过insert并指定插入位置进行数据添加，操作后列表向后扩展。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">users = [] # 定义一个空列表</span><br><span class="line"></span><br><span class="line"># 通过append添加一个数据</span><br><span class="line">users.append('val')</span><br><span class="line"></span><br><span class="line"># 通过insert并指定位置进行数据添加</span><br><span class="line">users.insert(0, 'joe') # 插入数据到第一个位置，原有的数据往后移一位</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><p>在列表中可通过位置来移除元素，或者通过元素的值来进行移除。如果通过值来进行移除时，只会移除第一个值为指定值的元素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 通过位置删除元素</span><br><span class="line">del users[-1] # 删除最后一个元素</span><br><span class="line"></span><br><span class="line"># 通过值来进行移除</span><br><span class="line">users.remove('mia')</span><br></pre></td></tr></tbody></table></figure><h5 id="弹出数据"><a href="#弹出数据" class="headerlink" title="弹出数据"></a>弹出数据</h5><p>如果移除的数据还需要参与其他操作时，可通过pop方法来实现。pop方法默认从列表尾部开始弹出元素，也可通过指定pop方法的参数来弹出指定位置的元素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 弹出最后一个元素</span><br><span class="line">last_user = users.pop()</span><br><span class="line">print(last_user)</span><br><span class="line"></span><br><span class="line"># 通过索引进行元素获取</span><br><span class="line">first_user = users.pop(0)</span><br><span class="line">print(first_user)</span><br></pre></td></tr></tbody></table></figure><h5 id="获取列表长度"><a href="#获取列表长度" class="headerlink" title="获取列表长度"></a>获取列表长度</h5><p>通过len方法可获取到列表中有多少个元素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_users = len(users)</span><br><span class="line"></span><br><span class="line">print(f"We have {num_users} users.")</span><br></pre></td></tr></tbody></table></figure><h5 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h5><p>sort方法在对列表进行排序时，返回一个新的根据排序条件排序后的新列表，原始列表中元素的顺序不改变。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 对列表进行正序排序</span><br><span class="line">users.sort()</span><br><span class="line"></span><br><span class="line"># 对列表进行逆序排序</span><br><span class="line">users.sort(reverse=True)</span><br><span class="line"></span><br><span class="line"># 另一种逆序排序的方法</span><br><span class="line">users.reverse()</span><br></pre></td></tr></tbody></table></figure><h5 id="循环访问列表的元素"><a href="#循环访问列表的元素" class="headerlink" title="循环访问列表的元素"></a>循环访问列表的元素</h5><p>通过for循环访问列表中的每一个元素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for user in users:</span><br><span class="line">    print(user)</span><br></pre></td></tr></tbody></table></figure><h5 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h5><p>可通过循环和range函数生成一个列表，也可以通过列表生成式生成。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 通过循环生成</span><br><span class="line">squares = []</span><br><span class="line">for x in range(1, 11):</span><br><span class="line">    squares.append(x**2)</span><br><span class="line"></span><br><span class="line"># 通过列表生成式</span><br><span class="line">squares = [x**2 for x in range(1, 11)]</span><br></pre></td></tr></tbody></table></figure><h5 id="简单统计"><a href="#简单统计" class="headerlink" title="简单统计"></a>简单统计</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ages = [93, 92, 99, 66, 17, 85, 1, 35, 82, 2, 77]</span><br><span class="line"># 获取最小值</span><br><span class="line">youngest = min(ages)</span><br><span class="line"></span><br><span class="line"># 获取最大值</span><br><span class="line">oldest = max(ages)</span><br><span class="line"></span><br><span class="line"># 获取所有元素的和</span><br><span class="line">total = sum(ages)</span><br></pre></td></tr></tbody></table></figure><h5 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h5><p>通过索引获取到列表的切片数据，生成新的子列表。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">finisthers = ['kai', 'abe', 'ada', 'gus', 'zoe']</span><br><span class="line"></span><br><span class="line"># 获取前3个元素的子列表</span><br><span class="line">first_three = finishers[:3]</span><br><span class="line"></span><br><span class="line"># 获取最后三个</span><br><span class="line">last_three = finishers[-3:]</span><br><span class="line"></span><br><span class="line"># 获取中间三个</span><br><span class="line">middle_three = finishers[1:4]</span><br></pre></td></tr></tbody></table></figure><h4 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h4><ul><li>使用4个空格作为缩进</li><li>保持每一行只有79个字符</li><li>使用单行空行分隔代码块</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识复习</title>
      <link href="ckm0nmi97000bh7x978lk4vkb.html"/>
      <url>ckm0nmi97000bh7x978lk4vkb.html</url>
      
        <content type="html"><![CDATA[<h4 id="变量-Variables-和字符串-Strings"><a href="#变量-Variables-和字符串-Strings" class="headerlink" title="变量(Variables)和字符串(Strings)"></a>变量(Variables)和字符串(Strings)</h4><p><b>变量:</b>用于存储值。</p><p><b>字符串:</b>是一串字符的集合，由单引号对(‘’)、双引号对(“”)或者三引号对(可以是连续三个单引号或双引号)包围。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 直接打印 Hello World</span><br><span class="line">print('Hello World')</span><br><span class="line"></span><br><span class="line"># 通过变量打印</span><br><span class="line">msg = 'Hello World'</span><br><span class="line">print(msg)</span><br><span class="line"></span><br><span class="line"># Python3.6之后新添加的特性 f-string，在变量中使用字符串</span><br><span class="line">first_name = 'albert'</span><br><span class="line">last_name = 'einstein'</span><br><span class="line">full_name = f"{first_name} {last_name}"</span><br><span class="line">print(full_name)</span><br></pre></td></tr></tbody></table></figure><h4 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表(Lists)"></a>列表(Lists)</h4><p><b>列表：</b>通过特殊的顺序存储一系列值。可通过索引或者循环的方式访问列表中保存的值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个列表</span><br><span class="line">bikes = ['trek', 'redline', 'giant']</span><br><span class="line"></span><br><span class="line"># 获取列表的第一个值</span><br><span class="line">first_bike = bikes[0]</span><br><span class="line"></span><br><span class="line"># 获取列表中的最后一个值</span><br><span class="line">last_bike = bikes[-1]</span><br><span class="line"></span><br><span class="line"># 通过循环打印列表中的值</span><br><span class="line">for bike in bikes:</span><br><span class="line">    print(bike)</span><br><span class="line"></span><br><span class="line"># 添加数据到列表</span><br><span class="line">bikes = []</span><br><span class="line">bikes.append('trek')</span><br><span class="line">bikes.append('redline')</span><br><span class="line">bikes.append('giant')</span><br><span class="line"></span><br><span class="line"># 生成一个数字列表</span><br><span class="line">squares = []</span><br><span class="line">for x in range(1, 11):</span><br><span class="line">    squares.append(x**2)</span><br><span class="line"></span><br><span class="line"># 列表生成式</span><br><span class="line">squares = [x**2 for x in range(1, 11)]</span><br><span class="line"></span><br><span class="line"># 列表切片</span><br><span class="line">finishers = ['sam', 'bob', 'ada', 'bea']</span><br><span class="line">first_two = finishers[:2]</span><br><span class="line"></span><br><span class="line"># 复制列表</span><br><span class="line">copy_of_bikes = bikes[:]</span><br></pre></td></tr></tbody></table></figure><h4 id="元组-tuples"><a href="#元组-tuples" class="headerlink" title="元组(tuples)"></a>元组(tuples)</h4><p><b>元组：</b>与列表类似，但元组中的数据是不可变的，也就是说一个元组在初始化以后，就不能改变其中的值，包括删除，添加，更新等。如果元组中存储的值是可变的（如列表），在对可变值进行操作后就生成了新的元组，跟原来的元组就不是同一个内存值了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个元组</span><br><span class="line">dimensions = (1920, 1080)</span><br></pre></td></tr></tbody></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p><b>字典：</b>存储序列之间的关系。字典中的每一个项是一个key-value对。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 生成字典</span><br><span class="line">alien = {'color': 'green', 'points': 5}</span><br><span class="line"></span><br><span class="line"># 访问一个项的值</span><br><span class="line">print(f"The alien's color is {alien['color']}")</span><br><span class="line"></span><br><span class="line"># 往字典中添加新的key-value对</span><br><span class="line">alien['x_position'] = 0</span><br><span class="line"></span><br><span class="line"># 通过循环访问字典中的所有项</span><br><span class="line">fav_numbers = {'eric': 17, 'ever': 4}</span><br><span class="line">for name, number in fav_numbers.items():</span><br><span class="line">    print(f"{name} loves {number}")</span><br><span class="line"></span><br><span class="line"># 只获取key的值</span><br><span class="line">for name in fav_numbers.keys():</span><br><span class="line">    print(f"{name} loves a number")</span><br><span class="line"></span><br><span class="line"># 只获取所有的value值</span><br><span class="line">for number in fav_numbers.values():</span><br><span class="line">    print(f"{number} is favorite")</span><br></pre></td></tr></tbody></table></figure><h4 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h4><p>程序可通过input函数接收用户的输入，所有的输入数据都被存储在字符串中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 提示用户输入一个值</span><br><span class="line">name = input("What's your name? ")</span><br><span class="line">print(f"Hello {name}")</span><br><span class="line"></span><br><span class="line"># 提示用户输入一个数字</span><br><span class="line">age = input("How old are you？ ")</span><br><span class="line"></span><br><span class="line"># 将字符类型转换为整数型</span><br><span class="line">age = int(age)</span><br><span class="line"></span><br><span class="line"># 提示用户输入一个小数</span><br><span class="line">pi = input("Waht's the value of pi? ")</span><br><span class="line">pi = float(pi)</span><br></pre></td></tr></tbody></table></figure><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p><b>if语句：</b>用于测试特定的条件并做出适当的响应（即执行对应的代码）。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">"""</span><br><span class="line"># 条件</span><br><span class="line"># 等于</span><br><span class="line">x == 42</span><br><span class="line"></span><br><span class="line"># 不等于</span><br><span class="line">x != 42</span><br><span class="line"></span><br><span class="line"># 大于</span><br><span class="line">x &gt; 42</span><br><span class="line"></span><br><span class="line"># 大于等于</span><br><span class="line">x &gt;= 42</span><br><span class="line"></span><br><span class="line"># 小于</span><br><span class="line">x &lt; 42</span><br><span class="line"></span><br><span class="line"># 小于等于</span><br><span class="line">x &lt;= 42</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"># 通过列表来判断条件</span><br><span class="line">'trek' in bikes # return True</span><br><span class="line">'surly' in bikes # return False</span><br><span class="line"></span><br><span class="line"># 将boolean值赋值给变量</span><br><span class="line">game_active = True</span><br><span class="line">can_edit = False</span><br><span class="line"></span><br><span class="line"># 简单条件判断</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print("You can vote!")</span><br><span class="line"># 如果只有单个条件，后续的代码就不需要了</span><br><span class="line">else:</span><br><span class="line">    print(You can't vote!")</span><br><span class="line"></span><br><span class="line"># if-elif-else语句</span><br><span class="line">if age &lt; 4:</span><br><span class="line">    ticket_price = 0</span><br><span class="line">elif age &lt; 18:</span><br><span class="line">    ticket_price = 10</span><br><span class="line">else:</span><br><span class="line">    ticket_price = 15</span><br></pre></td></tr></tbody></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while循环按照特定的条件对一块代码块进行重复执行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 一个简单的while循环</span><br><span class="line">current_value = 1</span><br><span class="line">while current_value &lt;= 5:</span><br><span class="line">    print(current_value)</span><br><span class="line">    current_value += 1</span><br><span class="line"></span><br><span class="line"># 根据用户的特定输入来结束循环</span><br><span class="line">msg = ''</span><br><span class="line">while msg!='quit':</span><br><span class="line">    msg = input("What's your messag? ")</span><br><span class="line">    print(msg)</span><br></pre></td></tr></tbody></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for循环用于遍历可迭代访问数据中的所有数据。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 简单的for循环</span><br><span class="line">a_list = ['a', 'b', 'c']</span><br><span class="line">for item in a_list:</span><br><span class="line">    print(item)</span><br></pre></td></tr></tbody></table></figure><h4 id="functions-函数"><a href="#functions-函数" class="headerlink" title="functions - 函数"></a>functions - 函数</h4><p>函数是一段代码块的名字，用于完成特定的工作。传递给函数的值被称为argument，函数中接收argument的值被称为parameter。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 声明一个简单的函数</span><br><span class="line">def greet_user():</span><br><span class="line">    """</span><br><span class="line">    一个无参数的函数，用于打印一个简单的问候语。</span><br><span class="line">    """</span><br><span class="line">    print('Hello')</span><br><span class="line">greet_user()</span><br><span class="line"></span><br><span class="line"># 传递一个argument给函数</span><br><span class="line">def greet_user(name):</span><br><span class="line">    """</span><br><span class="line">    带参数的函数，name被成为parameter，调用函数传入的值被成为argument</span><br><span class="line">    """</span><br><span class="line">    print(f"Hello, {name}")</span><br><span class="line">greet_user('jesse')</span><br><span class="line"></span><br><span class="line"># parameter带默认值的函数，带默认值的参数在声明函数时一般放在不带默认值的参数后面</span><br><span class="line">def make_pizza(size:int, topping: str='bacon'):</span><br><span class="line">    print(f"Have a {size} {topping} pizza!")</span><br><span class="line">make_pizza(5) # topping使用默认值</span><br><span class="line"></span><br><span class="line">make_pizza(6, 'pepperoni') # topping使用传入的值</span><br><span class="line"></span><br><span class="line"># 带返回值的函数</span><br><span class="line">def add_number(x: int, y: int) -&gt; int:</span><br><span class="line">    """</span><br><span class="line">    两个整数相加，并返回相加之后的和。</span><br><span class="line">    """</span><br><span class="line">    return x+y</span><br><span class="line">sum = add_number(3, 5)</span><br><span class="line">print(sum)</span><br></pre></td></tr></tbody></table></figure><h4 id="class-类"><a href="#class-类" class="headerlink" title="class - 类"></a>class - 类</h4><p><b>类：</b>用来定义一个object的特性和属性。一个具体类的信息存储在attributes中。类中的函数被称作方法。一个子类可以继承父类的属性和方法。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个简单的类</span><br><span class="line">class Dog:</span><br><span class="line">    """</span><br><span class="line">    # 类说明，用于写注释</span><br><span class="line">    """</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        """</span><br><span class="line">        # 注释</span><br><span class="line">        """</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def sit(self):</span><br><span class="line">        """</span><br><span class="line">        # 注释</span><br><span class="line">        """</span><br><span class="line">        print(f"{self.name} is sitting!")</span><br><span class="line"></span><br><span class="line">my_dog = Dog('Peso') # 实现一个类实例</span><br><span class="line">print(f"{my_dog.name} is a great dog”)</span><br><span class="line">my_dog.sit()</span><br><span class="line"></span><br><span class="line"># 子类继承父类</span><br><span class="line">class SARDog(Dog):</span><br><span class="line">    """</span><br><span class="line">    """</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        """</span><br><span class="line">        """</span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    def search(self):</span><br><span class="line">        """</span><br><span class="line">        """</span><br><span class="line">        print(f"{self.name} is searching.")</span><br><span class="line"></span><br><span class="line">new_dog = SARDog('Willie')</span><br><span class="line"></span><br><span class="line">print(f"{new_dog.name} is a search dog.")</span><br><span class="line">new_dog.sit()</span><br><span class="line">new_dog.search()</span><br></pre></td></tr></tbody></table></figure><h4 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h4><p>文件可以通过open方式以读(‘r’)、写(‘w’)和追加(‘a’)的方式来打开。注意一点，对于文件中的内容，需要指定encoding编码方式。默认方式为读。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 读文件，并存储其中的内容</span><br><span class="line">filename = 'siddhartha.txt'</span><br><span class="line"></span><br><span class="line">with open(filename, encoding='utf-8') as file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line"># 通过追加的方式写文件，如果用写的方式的话会覆盖掉之前的内容</span><br><span class="line">filename = 'journal.txt'</span><br><span class="line">with open(filename, 'a', encoding='utf-8') as file_object:</span><br><span class="line">    file_object.write('\nI love Python.")</span><br></pre></td></tr></tbody></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>如果在程序中不进行异常处理，程序会退出。比如在写爬虫时，如果一个地址无法访问到，程序中也没有对此异常进行处理，那程序退出后，已爬取的地址又得再爬一次。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">promt = "How many tickets do you need？"</span><br><span class="line">num_tickets = input(promt)</span><br><span class="line"></span><br><span class="line">try: # 尝试执行代码</span><br><span class="line">    num_tickets = int(num_tickets)</span><br><span class="line">except ValueError:</span><br><span class="line">    print("Please try again.")</span><br><span class="line">else:</span><br><span class="line">    print("Your tickets are printing.")</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年的小计划</title>
      <link href="ckm0nmi8z0001h7x9hvktay3g.html"/>
      <url>ckm0nmi8z0001h7x9hvktay3g.html</url>
      
        <content type="html"><![CDATA[<p>在不知不觉中之中，2020悄然的流逝，留下了一地鸡毛，2021也快过去了一个季度，现在回头想想，除了头上的白发和身上的肥肉，感觉什么都没有得到。</p><p>时间总是不留任何情面，无论你是谁。</p><p>工作也快要有8年了，很多时候都感觉自己什么也不会，也曾想过万一哪一天失业了，自己还能做什么来养活自己和家人呢？</p><p>经过一些事，也算是彻底的理清了自己未来想要做什么，想要依靠什么来安身立命。痛定思痛，给自己立下了如下的Flag，希望2021年总的时候不要反过来打脸，再把Flag往下延。</p><p>Flag如下：</p><ul><li><ol><li>复习Python核心知识、完成Go语言的学习</li></ol></li><li><ol start="2"><li>系统的学习NLP技术，同时补深度学习、传统机器学习的理论</li></ol></li><li><ol start="3"><li>完成2-3个基于AI技术的安全工具</li></ol></li><li><ol start="4"><li>坚持学习算法并刷题</li></ol></li><li><ol start="5"><li>坚持写Blog，记录自己的技术成长之路</li></ol></li><li><ol start="6"><li>最最重要的是要早睡和锻炼身体</li></ol></li></ul><p>想了很多，可写出来的却很少，废话不多说，努力吧！中年男子。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
