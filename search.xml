<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python复习之装饰器、上下文管理器、生成器与迭代器</title>
      <link href="ckmeovy2t0000vsx9edug2mcg.html"/>
      <url>ckmeovy2t0000vsx9edug2mcg.html</url>
      
        <content type="html"><![CDATA[<h4 id="Python虚拟环境"><a href="#Python虚拟环境" class="headerlink" title="Python虚拟环境"></a>Python虚拟环境</h4><p>基于Python开发多个项目，如果使用本机安装的Python环境很容易遇到第三方包版本冲突的情况（比如引用不同的第三方包时，引入的包对某个依赖包的版本需求不同）。这时候就可以通过虚拟环境来分离各个项目，Python虚拟环境就是从真实环境中克隆出来的一个被隔离的独立Python环境，虚拟环境相当于每个项目的“私人空间”，也就是说即使某个虚拟环境被破坏了，也不会影响到其他的项目。</p><p>管理虚拟环境一般可以使用基于virtualenv的virtualenvwrapper和pipenv（通过pip安装即可），当然也可以使用conda来进行管理。</p><p>使用基于virtualenv的工具来管理时，一定要记得在PATH上添加WORKON_HOME，这样能指定虚拟环境存放的目录。</p><h4 id="Python装饰器"><a href="#Python装饰器" class="headerlink" title="Python装饰器"></a>Python装饰器</h4><p>装饰器是Python中非常拥有的一个高级特性。装饰器本质上是一种设计模式。</p><p>Python中使用装饰器可以在不改变函数实现的情况下增加额外的功能。即装饰器向函数添加新的功能，同时不改变其原有机构，起到装饰的作用。</p><p>Python装饰器的内部实现是通过闭包实现的。<b>闭包：</b>就是能够访问其他函数内部变量的函数，也就是能够访问上层函数作用域中的局部变量的内层函数就是闭包。</p><p>代码如下所示：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer_func</span>(<span class="params">f</span>):</span></span><br><span class="line">    local_var = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> b + f(x, y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    of = outer_func(<span class="built_in">sum</span>)</span><br><span class="line">    print(of(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></tbody></table></figure><p>上述代码中：</p><ul><li>outer_func()是外层函数，在函数中定义了一个名为local_var的局部变量</li><li>inner(x, y)是内层函数。inner可以直接访问外层函数中的局部变量local_var，这里inner就是闭包了</li></ul><p>sum()函数是主体，outer_func(f)是装饰物，只能给主体进行装饰，作用是给主体函数的返回值加上10。</p><p>Python中可以使用”语法糖@”来直接使用装饰器，代码修改如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer_func</span>(<span class="params">f</span>):</span></span><br><span class="line">    local_var = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> b + f(x, y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer_func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    val = <span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    print(val))</span><br></pre></td></tr></tbody></table></figure><p>如果一个主体存在多个装饰器，装饰器的调用顺序为依次从下到上进行调用，也就是先调用距离函数最近的装饰器，最后调用最远的装饰器。</p><p>示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefix_A</span>(<span class="params">f</span>):</span></span><br><span class="line">    prefix = <span class="string">"A_{}"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">source</span>):</span></span><br><span class="line">        res = prefix.<span class="built_in">format</span>(f(source))</span><br><span class="line">        print(<span class="string">"append_A: {}"</span>.<span class="built_in">format</span>(res))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefix_B</span>(<span class="params">f</span>):</span></span><br><span class="line">    prefix = <span class="string">"B_{}"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">source</span>):</span></span><br><span class="line">        res = prefix.<span class="built_in">format</span>(f(source))</span><br><span class="line">        print(<span class="string">"append_B: {}"</span>.<span class="built_in">format</span>(res))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefix_C</span>(<span class="params">f</span>):</span></span><br><span class="line">    prefix = <span class="string">"C_{}"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">source</span>):</span></span><br><span class="line">        res = prefix.<span class="built_in">format</span>(f(source))</span><br><span class="line">        print(<span class="string">"append_C: {}"</span>.<span class="built_in">format</span>(res))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@prefix_C</span></span><br><span class="line"><span class="meta">@prefix_B</span></span><br><span class="line"><span class="meta">@prefix_A</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_prefix</span>(<span class="params">source</span>):</span></span><br><span class="line">    print(<span class="string">"append: {}"</span>.<span class="built_in">format</span>(source))</span><br><span class="line">    <span class="keyword">return</span> sourse</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    val = add_prefix(<span class="string">"Python"</span>)</span><br><span class="line">    print(val)</span><br></pre></td></tr></tbody></table></figure><p><b>property</b>装饰器，也称为属性装饰器，用于装饰属性。</p><p>代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    声明一个Person类，有名字、性别和年龄三个属性</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name: <span class="built_in">str</span>, sex: <span class="built_in">str</span>, age: <span class="built_in">int</span></span>):</span></span><br><span class="line">        <span class="comment"># 以 _ 开头的属性为私有属性，对外不可见</span></span><br><span class="line">        self._name = name </span><br><span class="line">        self._sex = sex</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        name属性，从内部获取self._name的值</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self, new_name</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        name属性设置器</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._name = new_name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sex</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        sex属性，从内部获取self._sex的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        因为没有设置属性设置器，所以sex为只读属性</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self._sex</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        age属性，从内部获取self._age的值</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self, new_age</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        age属性设置器</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._age = new_age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    person = Person(name=<span class="string">"xiaoming"</span>, sex=<span class="string">"M"</span>, age=<span class="number">25</span>)</span><br><span class="line">    print(<span class="string">"Init info: name={}, sex={}, age={}"</span>.<span class="built_in">format</span>(person.name, person.sex, person.age))</span><br><span class="line">    person.name = <span class="string">"Tom"</span></span><br><span class="line">    person.age = <span class="number">27</span></span><br><span class="line">    print(<span class="string">"Show info: name={}, sex={}, age={}"</span>.<span class="built_in">format</span>(person.name, person.sex, person.age))</span><br></pre></td></tr></tbody></table></figure><p>property属性装饰器允许开发人员控制属性的访问权限，也就是可以控制属性为只读、可写属性。但是没有只写属性。</p><p>了解了装饰器以后，可以自行实现一个简单的装饰，如下所示，实现一个log装饰器，用于调试程序。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">基于logging模块，实现一个简单的log装饰器，能够输出debug、info、warning、error和critical这五个级别的日志，并且只输出函数开始和函数结束的日志。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># my_logger/logger.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Debug</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Debug装饰器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>) </span><span class="comment"># 使用wraps包装func的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 调用func函数</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        logging.getLogger().debug(</span><br><span class="line">            <span class="string">"{} is invoked with {}"</span>.<span class="built_in">format</span>(</span><br><span class="line">                func.__name__, args <span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">0</span> <span class="keyword">else</span> kwargs</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> debug</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Info</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Info装饰器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        logging.getLogger().info(</span><br><span class="line">            <span class="string">"{} is inovked with {}"</span>.<span class="built_in">format</span>(</span><br><span class="line">                func.__name__, args <span class="keyword">if</span> <span class="built_in">len</span>(args)&gt;<span class="number">0</span> <span class="keyword">else</span> kwargs</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Warning</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Warning装饰器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warning</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        logging.getLogger().warning(</span><br><span class="line">            <span class="string">"{} is invoked with {}"</span>.<span class="built_in">format</span>(</span><br><span class="line">                func.__name__, args <span class="keyword">if</span> <span class="built_in">len</span>(args)&gt;<span class="number">0</span> <span class="keyword">else</span> kwargs</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> warning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Error</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Error装饰器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">error</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        logging.getLogger().error(</span><br><span class="line">            <span class="string">"{} is invoked with {}"</span>.<span class="built_in">format</span>(</span><br><span class="line">                func.__name__, args <span class="keyword">if</span> <span class="built_in">len</span>(args)&gt;<span class="number">0</span> <span class="keyword">else</span> kwargs</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Critical</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Critical装饰器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">critical</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        logging.getLogger().critical(</span><br><span class="line">            <span class="string">"{} is invoked with {}"</span>.<span class="built_in">format</span>(</span><br><span class="line">                func.__name__, args <span class="keyword">if</span> <span class="built_in">len</span>(args)&gt;<span class="number">0</span> <span class="keyword">else</span> kwargs</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> critical</span><br></pre></td></tr></tbody></table></figure><p>包初始化函数中设置日志格式，代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my_logger/__init__.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">"%(asctime)s-%(filename)s%(funcName)s(%(lineno)d)[%(thread)d]-[%(levalname)s]%(message)s"</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>测试代码如下:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> logger.logger <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="meta">@Debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_debug</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Info</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_info</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Warning</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_warning</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Error</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_error</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Critical</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_critical</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Debug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> args:</span><br><span class="line">        res += item</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    test_debug(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"Debug decorator"</span>)</span><br><span class="line">    test_info(<span class="string">"1+2"</span>)</span><br><span class="line">    test_warning()</span><br><span class="line">    test_error()</span><br><span class="line">    test_critical()</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">    logging.info(res)</span><br></pre></td></tr></tbody></table></figure><h4 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h4><p>上下文管理器对于资源的管理和代码的整洁有着非常大的意义。使用上下文管理器，会让开发者在写代码时米有或者尽可能的没有资源泄露，而没有资源泄露是生产环境中的代码的基本要求。</p><p>“资源泄露”不仅包含内存泄露，还包含了文件描述符或文件句柄泄露、数据库连接泄露给等。</p><p>上下文管理器中的上下文指的是与程序执行相关的环境。上下文管理器就是管理上下文的工具，本质上就是一个包装了任意代码块的对象。它能够保证在进入上下文管理器时执行一些操作（如打开文件、建立连接等），在离开上下文管理器时执行释放资源的操作（如关闭文件、关闭连接等）。</p><p>上下文管理器的流程大致可分为三步：</p><ol><li>进入上下文管理器：在进入上下文管理器时，先申请资源。上下文管理器会保证在进入的时候执行自定义的申请资源的代码。</li><li>进行上下文管理器之后：执行对应的业务逻辑代码。</li><li>退出上下文管理器：在退出上下文管理器时，执行释放资源的操作，不论代码是否抛出异常，上下文管理器都会执行释放资源的操作。</li></ol><p>所以，上下文管理器定义了一种进入和离开的机制，由开发者自己实现对应的操作。示例如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发文件，文件句柄存储在fp中</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'xxx.xx'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fp: <span class="comment"># 逐行读取文件中的内容</span></span><br><span class="line">        print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><p>如果不试用上下文管理器的话，就需要使用异常处理的方式来进行读取，代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fp = <span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">'xxx.xx'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line, end=<span class="string">""</span>)</span><br><span class="line"><span class="keyword">except</span> xxx:</span><br><span class="line">    print(<span class="string">"..."</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> fp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        fp.close()</span><br></pre></td></tr></tbody></table></figure><p>本质上当进入上下文管理器，执行with语句时，Python调用了对象的’<strong>enter</strong>‘方法，当离开with时（不论是正常退出还是出现异常），则调用的是对象的’<strong>exit</strong>‘方法。这两个方法对应着上下文管理器<b>资源的申请和资源的释放</b>，所以只要在自己类中加入这两个方法，with就可以正常管理类对象的资源的申请和释放了。</p><p>在使用’<strong>enter</strong>‘和’<strong>exit</strong>‘时，需要遵守如下规则：</p><ol><li>‘<strong>enter</strong>‘方法中一般是申请对象所需要的资源，最后需要返回一个对象，这个对象会被赋值给上下文管理器代码中as之后的变量，返回的对象一般是self；</li><li>在’<strong>init</strong>‘和’<strong>enter</strong>‘方法中需要捕获可能的异常，否则’<strong>exit</strong>‘方法将不会被调用。也就是说，在’<strong>init</strong>‘中__enter__函数中不抛任何异常，否则将会造成源泄露；</li><li>进入上下文管理器代码块后（with语句块），无论在上下文管理代码中抛设么异常或产生什么错误（Python中定义的异常），都是会调用’<strong>exit</strong>‘来释放资源；</li><li>‘<strong>exit</strong>‘如果返回True，那么将 忽略’<strong>exit</strong>‘中的任何异常，将会没有错误地退出上下文管理器代码段。</li></ol><p>示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextDemo</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    支持上下文管理的类</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">"Create an object"</span>)</span><br><span class="line">        self._birthday = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        申请资源</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(<span class="string">"Invoke __enter__"</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        释放资源</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(<span class="string">"Invoke __exit__"</span>)</span><br><span class="line">        <span class="keyword">if</span> exc_type:</span><br><span class="line">            print(<span class="string">"exc_type: {}"</span>.<span class="built_in">format</span>(exc_type))</span><br><span class="line">            print(<span class="string">"exc_val: {}"</span>.<span class="built_in">format</span>(exc_val))</span><br><span class="line">            print(<span class="string">"exc_tb: {}"</span>.<span class="built_in">format</span>(exc_tb))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birthday</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._birthday</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">with</span> ContextDemo() <span class="keyword">as</span> demo:</span><br><span class="line">        print(demo.birthday)</span><br><span class="line">        <span class="comment"># 手动产生异常</span></span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"raise an exception"</span>)   </span><br></pre></td></tr></tbody></table></figure><p>让函数支持上下文管理器，直接使用contextlib.contextmanager装饰器就能实现，代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_demo</span>(<span class="params">para</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    使用contextmanager装饰器让函数支持上下文管理</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fp = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">"enter context func demo: {}"</span>.<span class="built_in">format</span>(para))</span><br><span class="line">        fp =  <span class="built_in">open</span>(<span class="string">'xxx'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">yield</span> fp</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">"exit context func demo."</span>)</span><br><span class="line">        <span class="keyword">if</span> fp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            fp.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> func_demo(<span class="string">"test"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure><p>contextmanager装饰让函数支持上下文管理，func_demo首先打开文件，如果无异常，yield把文件句柄fp赋值给 with 后面的变量，当离开上下文管理器时，代码从finally开始执行后面的代码。</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>迭代时重复反馈过程的一种活动，通常是为了逼近所需的目标或结果。每一次对过程的重复称为一次迭代，每一次迭代的所得到的记过会作为下一次迭代的初始值。</p><p><b>可迭代对象</b> - 满足可迭代协议的对象称之为可迭代对象。可迭代对象必须包含’<strong>iter</strong>‘方法，该方法返回相应的迭代器，如listHonda的__iter__返回list_iterator迭代器。</p><p>迭代器协议如下：</p><ol><li>包含’<strong>iter</strong>‘方法，该方法返回迭代器本身；</li><li>包含’<strong>next</strong>‘方法，当调用该方法时，都返回下一个值，当没有返回值时（达到某个边界条件），需要抛出’StopIteration’异常来终止迭代。</li></ol><p>实例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IteratorCounter</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, max_iter_count=<span class="number">10</span></span>):</span></span><br><span class="line">        self._iter_count = <span class="number">0</span></span><br><span class="line">        self._max_iter_count = max_iter_count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._iter_count &gt;= self._max_iter_count:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._iter_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> self._iter_count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></tbody></table></figure><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>生成器的本质就是迭代器，拥有和迭代器一样的特性，但是更优于迭代器。</p><p>Python中创建生成器有两种方法：</p><ol><li>生成器函数</li><li>生成器表达式</li></ol><h5 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h5><p>简单点说，生成器函数就是包含了yield语句的函数。定义生成器函数就像普通函数一样，只需要用yield语句代替return<br>语句即可。</p><p>如果一个函数至少包含一个yield语句，那么就是一个生成器函数。yield与return的区别是：</p><ul><li>return返回值并终止当前函数的继续执行。</li><li>yield的执行流程是先暂停当前函数的执行，然后返回结果，待调用函数执行完成后在返回yield语句执行后面的代码。</li></ul><p>生成器函数示例代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_even</span>(<span class="params">number_count: <span class="built_in">int</span>=<span class="number">5</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    偶数序列生成器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, number_count):</span><br><span class="line">        print(<span class="string">"yield...{0}"</span>.<span class="built_in">format</span>(num))</span><br><span class="line">        <span class="comment"># yield先暂停当前函数的执行，返回num的值给调用函数</span></span><br><span class="line">        <span class="comment"># 调用函数执行完成后再返回到该函数暂停处继续执行</span></span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">        num += <span class="number">2</span></span><br><span class="line">        print(<span class="string">"yield"</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h5><p>生成器表达式主要用于使用简单的方式构建一个生成器，与创建匿名函数类型，生成器表达式也可以创建匿名的生成器表达式。</p><p>生成器表达式与列表解析式类似，只是使用的是圆括号。它们两的主要区别在于，列表解析生成整个列表，而生成器表达式生成一个生成器。生成器表达式更节省内存。</p><p>示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>] <span class="comment"># 初始化一个列表</span></span><br><span class="line"></span><br><span class="line">list_2 = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> my_list] <span class="comment"># 使用列表解析生成一个新的列表</span></span><br><span class="line"></span><br><span class="line">generator = (x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> my_list) <span class="comment"># 使用生成器表达式生成一个生成器函数</span></span><br></pre></td></tr></tbody></table></figure><h5 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h5><p>yield from主要用途是从其他生成器迭代返回值。使用前提是必须先有生成器。</p><p>使用示例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_even</span>(<span class="params">number_count: <span class="built_in">int</span>=<span class="number">5</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回偶数序列生成器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, number_count):</span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">        num += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_odd</span>(<span class="params">number_count: <span class="built_in">int</span>=<span class="number">5</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回奇数序列生成器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, number_count):</span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">        num += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    names = [<span class="string">'Tom'</span>, <span class="string">'Kim'</span>, <span class="string">'Simth'</span>]</span><br><span class="line">    generaters = [generate_even(), generate_odd(), names, <span class="number">2345</span>, <span class="string">"done."</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel_generate</span>():</span></span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> generaters:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(element, <span class="string">'__iter__'</span>):</span><br><span class="line">                <span class="keyword">yield</span> <span class="keyword">from</span> element</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">yield</span> element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> travel_generate:</span><br><span class="line">        print(item, end=<span class="string">""</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-条件与循环</title>
      <link href="ckmd4q4ip000e46x982dp3btq.html"/>
      <url>ckmd4q4ip000e46x982dp3btq.html</url>
      
        <content type="html"><![CDATA[<h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>每个程序都有仅在特定情况下才能运行的部分代码，这部分代码的执行通过条件语句来控制。</p><p>程序也可能有需要重复运行的代码，这部分代码的运行又是通过循环来控制的。</p><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><p>Go中方法定义为：与给定类型的值相关的函数。有点像面向对象中附加到“对象”上的方法。</p><p>例如，time包有一个表示日期（年、月、日）和时间（时、分、秒）的Time类型。每一个time.Time值都有一个返回年份的Year方法。代码如下所示：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span> <span class="comment">// 导入"time"包，以便于使用time.Time类型</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> now time.Time = time.Now() <span class="comment">// time.Now()返回代表当前日期和时间的time.Time值，存储在now变量中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> year <span class="keyword">int</span> = now.Year() <span class="comment">// 通过调用time.Time值(now)的Year方法返回年份</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>strings包中有一个Replace类型，可以在字符串中搜索子字符串，并将其替换为另外的值，代码如下：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    broken := <span class="string">"G# r#cks!"</span></span><br><span class="line">    replacer := strings.NewReplacer(<span class="string">"#"</span>, <span class="string">"o"</span>) # 返回strings.Replace类型，并指定<span class="string">"#"</span>替换为<span class="string">"o"</span></span><br><span class="line">    fixed := replacer.Replace(broken)</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="通过条件语句实现评分系统"><a href="#通过条件语句实现评分系统" class="headerlink" title="通过条件语句实现评分系统"></a>通过条件语句实现评分系统</h4><p>程序需求为：学生输入百分比分数，返回是否通过。(60以上为通过)</p><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>最常见的注释形式是用两个斜杠（//）标记。被标记的行被视为注释内容，一个//注释可以单独出现在一行中，也可以出现在一行代码之后。</p><p>块注释是跨越多行。标记开始为(“/<em>“)，”</em>/“为标记结束，标记之间的内容都是注释。</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>初步实现，获取到用户的输入：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bufio"</span> <span class="comment">// 接收用户输入的包</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Printf(<span class="string">"请输入分数: "</span>)</span><br><span class="line">    reader := bufio.NewReader(os.Stdin) <span class="comment">// 通过bufio.NewReader读取标准键盘输入</span></span><br><span class="line">    input := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">// 返回用户输入的所有内容，直到&lt;Enter&gt;键为止。</span></span><br><span class="line">    fmt.Println(input)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>执行上面的代码会出错，提示”multiple-value reader.ReadString() in signle-value context”。</p><p>因为ReadString方法返回两个值，但只提供了一个变量来赋值。</p><p>在Go中，方法可以返回任意数量的值。Go中多个返回值最常见的方法是返回一个额外的错误值，可以通过查询该方法或函数运行时是否发生了错误。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>, err := strconv.ParseBool(<span class="string">"true"</span>) <span class="comment">// 如果字符串无法转换为bool值，则返回一个错误</span></span><br><span class="line"></span><br><span class="line">file, err := os.Open(<span class="string">"Myfile.txt"</span>) <span class="comment">// 如果文件无法打开，则返回一个错误</span></span><br><span class="line"></span><br><span class="line">response, err := http.Get(<span class="string">"http://golang.org"</span>) <span class="comment">// 如果无法获取到页面，则返回错误</span></span><br></pre></td></tr></tbody></table></figure><p>在Go中，要求声明的变量都必须在某个地方使用。如果定义了一个变量如err，而不对它进行检查，则程序无法编译。</p><p>如果不使用err变量，可通过如下方法来避免编译错误。</p><p><b>通过空白标识符”_”忽略</b></p><p>当有一个值时，通常会分配给一个变量，但不打算使用它，这时候，可以使用Go语言的空白标识符。为空白标识符分配一个值实际上回丢弃它。如下所示：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bufio"</span> <span class="comment">// 接收用户输入的包</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Printf(<span class="string">"请输入分数: "</span>)</span><br><span class="line">    reader := bufio.NewReader(os.Stdin) <span class="comment">// 通过bufio.NewReader读取标准键盘输入</span></span><br><span class="line">    <span class="comment">// 通过 "_" 作为错误值的占位符</span></span><br><span class="line">    input, _ := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">// 返回用户输入的所有内容，直到&lt;Enter&gt;键为止。</span></span><br><span class="line">    fmt.Println(input)</span><br></pre></td></tr></tbody></table></figure><p><b>处理错误</b><br>如果确实发生了错误，从ReadString方法中得到一个错误的返回值，空白标识符只会导致错误被忽略，而程序可以继续执行，有可能会使用无效的数据，导致后续的程序出现错误。</p><p>这种情况下，如果出现错误，更适合的做法是对用户发出警告并停止程序。</p><p>log包里有一个Fatal函数，可同时完成这两项操作：将一条信息记录到终端并停止运行。如下所示：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bufio"</span> <span class="comment">// 接收用户输入的包</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Printf(<span class="string">"请输入分数: "</span>)</span><br><span class="line">    reader := bufio.NewReader(os.Stdin) <span class="comment">// 通过bufio.NewReader读取标准键盘输入</span></span><br><span class="line">    input, err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">// 返回用户输入的所有内容，直到&lt;Enter&gt;键为止。</span></span><br><span class="line">    log.Fatal(err) <span class="comment">// 如果有错误，报告错误并停止运行</span></span><br><span class="line">    fmt.Println(input)</span><br></pre></td></tr></tbody></table></figure><h5 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h5><p>按照上面的处理错误的方式修改代码，现在又出现了另一个问题，即使一切正常，程序也会停止运行。因为err的值为nil，也就是没有错误。但是程序被设置为只简单的报告nil错误。正确的做法是，只有当err变量的值不为nil时才退出程序。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input, err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">// 返回用户输入的所有内容，直到&lt;Enter&gt;键为止。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    log.Fatal(err) <span class="comment">// 如果有错误，报告错误并停止运行</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要实现这一点，可以使用条件语句：只有在满足某个条件时，才导致代码块被执行。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if - 条件语句关键字</span></span><br><span class="line"><span class="comment">// condition - 条件表达式</span></span><br><span class="line"><span class="keyword">if</span> condition {</span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">} <span class="keyword">else</span> { <span class="comment">// else后的代码为可选</span></span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Go也支持条件语句中的多个分支。如下所示：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition {</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> condition2 { <span class="comment">// else if 可以有多个</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>条件语句依赖于布尔表达式（计算结果为true或false）来决定是否执行对应的代码块。如果仅在条件为false的时候才需要执行，可以使用”!”布尔求反运算符，它允许获取一个真值并使其为假，或者获取一个假值使它为真。</p><p>如果希望在两个条件都为真时运行对应代码块，可以使用”&amp;&amp;（与）”运算符，如果是两个条件之一则使用”||（或）”运算符。</p><h5 id="将字符串转换为数字"><a href="#将字符串转换为数字" class="headerlink" title="将字符串转换为数字"></a>将字符串转换为数字</h5><p>从键盘输入的内容是作为字符串读入的。Go只能将数字进行比较；不能将数字与字符串进行比较。而且没有直接的类型方法可以将字符串转换成数字。</p><p>strings包中有一个TrimSpace函数，将删除字符串开头和结尾的所有空白字符（换行、制表和常规空格）。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"\t formerly surrround by space\n"</span></span><br><span class="line">fmt.Println(strings.TrimSpace(s))</span><br></pre></td></tr></tbody></table></figure><p>去除空格后，可以使用strconv包的ParseFloat函数将其转换为float64值。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grade, err := strconv.ParseFloat(input, <span class="number">64</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Printf(<span class="string">"请输入分数："</span>)</span><br><span class="line">    reader := bufio.NewReader(os.Stdin)</span><br><span class="line">    input, err := reader.ParseFloat(input, <span class="number">64</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    input = <span class="keyword">string</span>.TrimSpace(input)</span><br><span class="line">    grade, err := strconv.ParseFloat(input, <span class="number">64</span>)</span><br><span class="line">    <span class="keyword">if</span> err!=<span class="literal">nil</span> {</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> grade&gt;=<span class="number">60</span> {</span><br><span class="line">        status := <span class="string">"passing"</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        status := <span class="string">"failing"</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    fmt.Println(grade, status)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><p>如果在上面的代码在运行时会出现错误”undefined: status”。Go中代码可以分为代码块，通常由”{}”包围。函数体和条件体也是代码块。</p><p>每个变量都有一个作用域：代码中“可见“的部分，声明变量可以在其作用域内的任何地方被访问，如果在作用域之外访问，则会收到一个错误。</p><p>上面代码的解决方法是将status变量的声明从条件块中向上移动到函数块中。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> status <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> grade&gt;=<span class="number">60</span>{</span><br><span class="line">    status = <span class="string">"passing"</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    status = <span class="string">"failing"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="短变量声明中只有一个变量必须是新的"><a href="#短变量声明中只有一个变量必须是新的" class="headerlink" title="短变量声明中只有一个变量必须是新的"></a>短变量声明中只有一个变量必须是新的</h5><p>当一个变量名在同一个作用域中被声明两次，会得到一个编译错误。但是只要短变量声明中至少有一个是新的变量名，则是允许的。新变量名会被视为声明，现有的变量名会被视为赋值。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">1</span> <span class="comment">// 声明a</span></span><br><span class="line">b, a := <span class="number">2</span>, <span class="number">3</span> <span class="comment">// 声明b，赋值a</span></span><br></pre></td></tr></tbody></table></figure><p>Go语言允许对所有事物使用短变量声明，即使对其中一个变量来说实际上是赋值。</p><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>通过一个猜数字的游戏来学习循环。需求为：</p><ol><li>生成一个1到100之间的随机数，并将其存储为目标数</li><li>提示玩家猜测的目标数是什么，并存储玩家的回答</li><li>判断玩家输入数与目标数是否相等，并给出对应提示，比如小于目标数提示“猜低了”</li><li>允许玩家最多猜10次，在每次猜测前，提示还剩几次机会</li><li>如果猜中了，提示玩家“恭喜你，猜对了！”，然后询问是否继续</li><li>如果10轮以后也没有猜对，提示正确的目标数</li></ol><h5 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h5><p>在Go中，导入包是通过路径进行导入，调用时是通过名称调用。具体区别如下：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/rand"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用包中的方法</span></span><br><span class="line">target := rand.Intn(<span class="number">100</span>) + <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>导入路径只是一个独特的字符串，用于标识包以及在导入语句中使用的包。一旦导入了包就可以通过其包名来引用它。</p><p>Go语言不要求包名与其导入路径有任何关系。导入路径的最后（或唯一）一段也用做包名。比如，导入路径为”archive”，则包名为archive，导入路径为”archive/zip”，则包名为zip。</p><p>将一个数字传递给rand.Intn，它将返回一个介于0和参数数字之间的随机整数。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    target := rand.Intn(<span class="number">100</span>) + <span class="number">1</span> <span class="comment">// 生成0+1到99+1之间的整数</span></span><br><span class="line">    fmt.Println(target)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>计算机生成的随机数并不是那么随机，为了得到不同的随机数，需要向rand.Seed函数传入一个值（随机数种子）。传递的种子相同的话，每次生成的随机数也会相同。</p><p>time.Now函数会提供一个表示当前日期和时间的Time值。在每次运行程序时，可以用来获取不同的种子值。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    seconds := time.Now().Unix() <span class="comment">// 获取当前日期和时间的整数形式</span></span><br><span class="line">    rand.Seed(seconds)</span><br><span class="line">    target := rand.Intn(<span class="number">100</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"生成1到100之间的随机数"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"你能猜中它么?"</span>)</span><br><span class="line">    fmt.Println(target)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="从键盘获取整数"><a href="#从键盘获取整数" class="headerlink" title="从键盘获取整数"></a>从键盘获取整数</h5><p>猜测的数字为整数，需要将获取到的字符串转换为整数。</p><p>因此，将把从键盘读取的字符串传递给strconv包的Atoi（字符串转整数）函数。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    seconds := time.Now().Unix()</span><br><span class="line">    rand.Seed(seconds)</span><br><span class="line">    target := rand.Intn(<span class="number">100</span>) + <span class="number">1</span></span><br><span class="line">    fmt.Println(<span class="string">"生成1到100之间的随机数"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"你能猜中它么?"</span>)</span><br><span class="line"></span><br><span class="line">    reader := bufio.NewReader(os.Stdin)</span><br><span class="line"></span><br><span class="line">    fmt.Print(<span class="string">"输入你猜的数字："</span>)</span><br><span class="line">    input, err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">// 返回用户输入的所有内容，直到&lt;Enter&gt;键为止。</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    }</span><br><span class="line">    input = strings.TrimSpace(input)</span><br><span class="line"></span><br><span class="line">    guess, err := strconv.Atoi(input)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="猜测数与目标进行比较"><a href="#猜测数与目标进行比较" class="headerlink" title="猜测数与目标进行比较"></a>猜测数与目标进行比较</h5><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> guess &lt; target {</span><br><span class="line">        fmt.Println(<span class="string">"不好意思，你猜的太小了！"</span>)</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> guess &gt; target {</span><br><span class="line">        fmt.Println(<span class="string">"不好意思，你猜的太大了！"</span>)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        fmt.Println(<span class="string">"恭喜，你猜对了！"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="循环执行"><a href="#循环执行" class="headerlink" title="循环执行"></a>循环执行</h5><p>目前，只能猜测一次，需求是允许最多猜测10次。当需要反复执行一个或多个语句时，可以将代码放入循环中。</p><p>Go中没有while循环，使用for来实现循环。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for - 循环关键字</span></span><br><span class="line"><span class="comment">// x:=4 - 条件初始化语句</span></span><br><span class="line"><span class="comment">// x&lt;=6 - 条件表达式</span></span><br><span class="line"><span class="comment">// x++ - 标志(post)语句</span></span><br><span class="line"><span class="keyword">for</span> x:=<span class="number">4</span>; x&lt;=<span class="number">6</span>; x++ {</span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>循环总是以for关键字开头。条件初始化语句用于初始化一个变量，条件表达式保持循环运行，知道变量达到某个值，标志（post）语句用于更改条件变量的值。</p><p>‘++’和’–’语句经常用于循环的标志(post)语句中。分别表示加1和减1。</p><p>‘+=’和’-=’表示获取变量中的值，加上或减去另一个值。</p><p>可以从for循环中省略初始化和标志（post）语句，只留下条件表达式。</p><p>实现提示用户猜测次数的功能：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    seconds := time.Now().Unix()</span><br><span class="line">    rand.Seed(seconds)</span><br><span class="line">    target := rand.Intn(<span class="number">100</span>) + <span class="number">1</span></span><br><span class="line">    fmt.Println(<span class="string">"生成1到100之间的随机数"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"你能猜中它么?"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> guesses := <span class="number">0</span>; guesses &lt; <span class="number">10</span>; guesses++ {</span><br><span class="line">        reader := bufio.NewReader(os.Stdin)</span><br><span class="line"></span><br><span class="line">        fmt.Print(<span class="string">"输入你猜的数字："</span>)</span><br><span class="line">        input, err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">// 返回用户输入的所有内容，直到&lt;Enter&gt;键为止。</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        }</span><br><span class="line">        input = strings.TrimSpace(input)</span><br><span class="line"></span><br><span class="line">        guess, err := strconv.Atoi(input)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> guess &lt; target {</span><br><span class="line">            fmt.Println(<span class="string">"不好意思，你猜的太小了！"</span>)</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> guess &gt; target {</span><br><span class="line">            fmt.Println(<span class="string">"不好意思，你猜的太大了！"</span>)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            fmt.Println(<span class="string">"恭喜，你猜对了！"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在循环已经就位，但又出现一个问题，就是尽管用户猜对了，代码也会执行10次。需要解决的问题是如果用户猜对了，退出循环代码。</p><p>Go提供了continue和break来控制循环流。continue是跳出当前循环，继续执行下一个循环轮次，break表示立即跳出循环。修改游戏代码如下：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    seconds := time.Now().Unix()</span><br><span class="line">    rand.Seed(seconds)</span><br><span class="line">    target := rand.Intn(<span class="number">100</span>) + <span class="number">1</span></span><br><span class="line">    fmt.Println(<span class="string">"生成1到100之间的随机数"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"你能猜中它么?"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> guesses := <span class="number">0</span>; guesses &lt; <span class="number">10</span>; guesses++ {</span><br><span class="line">        reader := bufio.NewReader(os.Stdin)</span><br><span class="line"></span><br><span class="line">        fmt.Print(<span class="string">"输入你猜的数字："</span>)</span><br><span class="line">        input, err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">// 返回用户输入的所有内容，直到&lt;Enter&gt;键为止。</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        }</span><br><span class="line">        input = strings.TrimSpace(input)</span><br><span class="line"></span><br><span class="line">        guess, err := strconv.Atoi(input)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> guess &lt; target {</span><br><span class="line">            fmt.Println(<span class="string">"不好意思，你猜的太小了！"</span>)</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> guess &gt; target {</span><br><span class="line">            fmt.Println(<span class="string">"不好意思，你猜的太大了！"</span>)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            fmt.Println(<span class="string">"恭喜，你猜对了！"</span>)</span><br><span class="line">            <span class="keyword">break</span> <span class="comment">// 跳出循环</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="显示目标数"><a href="#显示目标数" class="headerlink" title="显示目标数"></a>显示目标数</h5><p>如果玩家进行了10次猜测都未找到目标数，则循环将退出。这种情况下，需要打印一条信息，“不好意思，你没有猜出来，目标数为xx”。</p><p>因此在猜测前，将声明一个保存布尔值的sucess变量。默认值为false，如果玩家猜对了，重新赋值为true，表示不需要打印失败信息。代码如下：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    seconds := time.Now().Unix()</span><br><span class="line">    rand.Seed(seconds)</span><br><span class="line">    target := rand.Intn(<span class="number">100</span>) + <span class="number">1</span></span><br><span class="line">    fmt.Println(<span class="string">"生成1到100之间的随机数"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"你能猜中它么?"</span>)</span><br><span class="line"></span><br><span class="line">    success := <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> guesses := <span class="number">0</span>; guesses &lt; <span class="number">10</span>; guesses++ {</span><br><span class="line">        reader := bufio.NewReader(os.Stdin)</span><br><span class="line"></span><br><span class="line">        fmt.Print(<span class="string">"输入你猜的数字："</span>)</span><br><span class="line">        input, err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">// 返回用户输入的所有内容，直到&lt;Enter&gt;键为止。</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        }</span><br><span class="line">        input = strings.TrimSpace(input)</span><br><span class="line"></span><br><span class="line">        guess, err := strconv.Atoi(input)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> guess &lt; target {</span><br><span class="line">            fmt.Println(<span class="string">"不好意思，你猜的太小了！"</span>)</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> guess &gt; target {</span><br><span class="line">            fmt.Println(<span class="string">"不好意思，你猜的太大了！"</span>)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            fmt.Println(<span class="string">"恭喜，你猜对了！"</span>)</span><br><span class="line">            success = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span> <span class="comment">// 跳出循环</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !success {</span><br><span class="line">        fmt.Println(<span class="string">"不好意思，你没有猜出来，目标数为"</span>, target)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="提示玩家剩余次数"><a href="#提示玩家剩余次数" class="headerlink" title="提示玩家剩余次数"></a>提示玩家剩余次数</h5><p>这里直接通过guesses的值来进行打印，代码如下：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    seconds := time.Now().Unix()</span><br><span class="line">    rand.Seed(seconds)</span><br><span class="line">    target := rand.Intn(<span class="number">100</span>) + <span class="number">1</span></span><br><span class="line">    fmt.Println(<span class="string">"生成1到100之间的随机数"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"你能猜中它么?"</span>)</span><br><span class="line"></span><br><span class="line">    success := <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> guesses := <span class="number">0</span>; guesses &lt; <span class="number">10</span>; guesses++ {</span><br><span class="line">        fmt.Printf(<span class="string">"你还有%d次机会。\n"</span>, (<span class="number">10</span> - guesses))</span><br><span class="line"></span><br><span class="line">        reader := bufio.NewReader(os.Stdin)</span><br><span class="line"></span><br><span class="line">        fmt.Print(<span class="string">"输入你猜的数字："</span>)</span><br><span class="line">        input, err := reader.ReadString(<span class="string">'\n'</span>) <span class="comment">// 返回用户输入的所有内容，直到&lt;Enter&gt;键为止。</span></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        }</span><br><span class="line">        input = strings.TrimSpace(input)</span><br><span class="line"></span><br><span class="line">        guess, err := strconv.Atoi(input)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> guess &lt; target {</span><br><span class="line">            fmt.Println(<span class="string">"不好意思，你猜的太小了！"</span>)</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> guess &gt; target {</span><br><span class="line">            fmt.Println(<span class="string">"不好意思，你猜的太大了！"</span>)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            fmt.Println(<span class="string">"恭喜，你猜对了！"</span>)</span><br><span class="line">            success = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span> <span class="comment">// 跳出循环</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !success {</span><br><span class="line">        fmt.Println(<span class="string">"不好意思，你没有猜出来，目标数为"</span>, target)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python复习--字典</title>
      <link href="ckmd4q4il000546x919b6b5qh.html"/>
      <url>ckmd4q4il000546x919b6b5qh.html</url>
      
        <content type="html"><![CDATA[<p>dict（字典）类型是Python语言的基石。在模块的命名空间、实例的属性和函数的关键字参数之中都可以看到字典的身影。与字典有关的内置函数都在__builtins__.__dict__模块中。<em>散列表</em>是字典类型性能出众的根本原因。</p><p>set（集合）类型的实现其实也是依赖于散列表。</p><p>想要进一步理解集合和字典，就得先理解散列表的原理。</p><h4 id="泛型映射类型"><a href="#泛型映射类型" class="headerlink" title="泛型映射类型"></a>泛型映射类型</h4><p>collections.abc模块中的Mapping和MutableMapping两个抽象基类，为dict和其他类似的类型定义形式接口。</p><p>非抽象映射类型一般不会直接继承这些抽象基类，而会直接对dict或是collections.UserDict进行扩展。这些抽象基类的主要作用定义了一个映射类型所需要的的最基本的接口。还能跟isinstance一起被用于判断某个数据是不是广义上的映射类型。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dict = {}</span><br><span class="line"><span class="built_in">isinstance</span>(my_dict, abc.Mapping) <span class="comment"># 返回 True</span></span><br></pre></td></tr></tbody></table></figure><p>映射类型都由一个共同的限制，只有<b>可散列</b>的数据类型才能用作映射里的键。</p><h4 id="字典推导（dictcmop"><a href="#字典推导（dictcmop" class="headerlink" title="字典推导（dictcmop)"></a>字典推导（dictcmop)</h4><p><b>字典推导</b>可以用来建造新dict，可以从任何以键值对作为元素的可迭代对象中构建新字典。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以数为元组的列表生成字典</span></span><br><span class="line"></span><br><span class="line">DIAL_CODES = [(<span class="number">86</span>, <span class="string">'China'</span>), (<span class="number">91</span>, <span class="string">'India'</span>),</span><br><span class="line">              (<span class="number">1</span>, <span class="string">'United States'</span>), (<span class="number">62</span>, <span class="string">'Indonesia'</span>)]</span><br><span class="line"></span><br><span class="line">country_code = {country: code <span class="keyword">for</span> code, country <span class="keyword">in</span> DIAL_CODES}</span><br><span class="line"></span><br><span class="line"><span class="comment"># country_code = {'China': 86, ...}</span></span><br></pre></td></tr></tbody></table></figure><h4 id="用setdefault处理找不到的键"><a href="#用setdefault处理找不到的键" class="headerlink" title="用setdefault处理找不到的键"></a>用setdefault处理找不到的键</h4><p>当字典d[k]不能找到正确的键的时候，会抛出异常。这时候可以使用d.get(k, default)来代替d[k]，给找不到的键一个默认的返回值。但是要更新某个键对应的值的时候，不管使用__getitem__还是get都会不自然，并且效率很低。dict.get并不是处理找不到的键的最好方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">WORD_RE = re.<span class="built_in">compile</span>(<span class="string">r'\w+'</span>)</span><br><span class="line"></span><br><span class="line">index = {}</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="keyword">for</span> index, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(fp, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> match <span class="keyword">in</span> WORD_RE.finditer(line):</span><br><span class="line">            word = match.group()</span><br><span class="line">            column_no = match.start()+<span class="number">1</span></span><br><span class="line">            <span class="comment"># 记录所出现的行和列</span></span><br><span class="line">            location = (index, column_no)</span><br><span class="line">            <span class="comment"># 使用get实现</span></span><br><span class="line">            <span class="comment"># occurrences = index.get(word, []) # 如果没有找到，返回[]</span></span><br><span class="line">            <span class="comment"># occurrences.append(location)</span></span><br><span class="line">            <span class="comment"># index[word] = occurrences</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用setdefault一行代码实现</span></span><br><span class="line">            index.setdefault(word, []).append(location)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以字母顺序进行打印</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> <span class="built_in">sorted</span>(index, key=<span class="built_in">str</span>.upper):</span><br><span class="line">    print(word, index[word])</span><br></pre></td></tr></tbody></table></figure><h4 id="映射的弹性查询"><a href="#映射的弹性查询" class="headerlink" title="映射的弹性查询"></a>映射的弹性查询</h4><p>有时候为了方便，就算某个键在映射里不存在，开发者也希望能通过这个键读取值的时候能得到一个默认值。有两种方法可以达到这个目的，一个是通过defaultdict这个类型而不是普通的dict，另一个是自定义一个dict子类，然后在子类中实现__missing__方法。</p><h5 id="defaultdict：处理找不到键的一个选择"><a href="#defaultdict：处理找不到键的一个选择" class="headerlink" title="defaultdict：处理找不到键的一个选择"></a>defaultdict：处理找不到键的一个选择</h5><p>用户在创建defaultdict对象的时候，就需要给它配置一个找不到键的时候返回的默认值的方法。</p><p>具体来说，在实例化一个defaultdict的时候，需要给构造方法提供一个可调用对象，这个对象会在__getitem__找不到键的时候被调用，返回某种默认值。</p><p>比如，在新建一个字典，dd=defaultdict(list)，如果键’new-key’在dd中不存在的话，dd[‘new-key’]会进行如下的操作：</p><ol><li>调用list()来建立一个新列表。</li><li>新列表作为值，’new-key’作为键，放入dd中。</li><li>返回这个列表的引用。</li></ol><p>这个用来生成新默认值的可调用对象存放在名为default_factory的实例属性中。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">WORD_RE = re.<span class="built_in">compile</span>(<span class="string">r'\w+'</span>)</span><br><span class="line"></span><br><span class="line">index = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="keyword">for</span> index, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(fp, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> match <span class="keyword">in</span> WORD_RE.finditer(line):</span><br><span class="line">            word = match.group()</span><br><span class="line">            column_no = match.start() + <span class="number">1</span></span><br><span class="line">            location = (index, column_no)</span><br><span class="line">            index[word].append(location)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以字母顺序进行打印</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> <span class="built_in">sorted</span>(index, key=<span class="built_in">str</span>.upper):</span><br><span class="line">    print(word, index[word])</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新坑开挖-Go</title>
      <link href="ckmd4q4io000b46x99i4o4v7b.html"/>
      <url>ckmd4q4io000b46x99i4o4v7b.html</url>
      
        <content type="html"><![CDATA[<h4 id="典型的Go文件布局"><a href="#典型的Go文件布局" class="headerlink" title="典型的Go文件布局"></a>典型的Go文件布局</h4><p>任何的Go语言文件布局，一般按如下三部分：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package子句 </span></span><br><span class="line"><span class="keyword">package</span> package_name</span><br><span class="line"></span><br><span class="line"><span class="comment">// import - 导入包部分</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    fmt.Println(<span class="string">"Hello, Go!"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><p>要调用函数(必要时候还需要带上包名)，需要输入函数名，以及一对圆括号。如下所示：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println()</span><br></pre></td></tr></tbody></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是一系列字节，通常表示文本字符。在代码中直接使用字符串字面量来定义字符串：双引号之间的文本，Go会把其视为字符串。在字符串中，换行符、制表符和其他难以包含在程序代码中的字符可以用转义字符来表示：反斜杠后跟表示另一个字符的字符。</p><table><thead><tr><th align="center">转义序列</th><th align="left">值</th></tr></thead><tbody><tr><td align="center">\n</td><td align="left">换行符</td></tr><tr><td align="center">\t</td><td align="left">制表符</td></tr><tr><td align="center">"</td><td align="left">双引号</td></tr><tr><td align="center">\</td><td align="left">反斜杠</td></tr></tbody></table><h4 id="符文-rune"><a href="#符文-rune" class="headerlink" title="符文(rune)"></a>符文(rune)</h4><p>字符串通常用于表示一系列文本字符，而在Go语言中，（rune）符文则用于表示单个字符。</p><p>字符串字面量由双引号(“)包围，但rune字面量由单引号(‘)包围。</p><p>在Go程序中可以使用任何语言的任何字符，因为Go语言使用Unicode标准来存储rune。rune被保存为数字代码，而不是字符本身，比如把rune传递给fmt.Println函数，输出的值卫视数字代码，而不是原始字符的值。</p><p>在rune中，转义序列（通过数字代码，如\t -&gt; 9, \n -&gt; 10, \ -&gt; 92）也可以用在rune字面量中，用来表示程序难以包含的字符。</p><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>布尔值只能有两个值之中的一个：true或false。对于条件语句特别有用，条件语句只有在条件为true或false时才会导致代码段运行。</p><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>可以直接在代码中定义数字，比字符串字面量更简单，只需要输入数字即可。</p><h4 id="数学运算于比较"><a href="#数学运算于比较" class="headerlink" title="数学运算于比较"></a>数学运算于比较</h4><p>Go的基本数学运算符的工作方式与大多数其他编程语言一样。’+’表示加法，’-‘表示减法，’*’表示乘法，’/‘表示除法。</p><p>‘&lt;’和’&gt;’可以用来比较两个值，看看其中一个值是否小于或大于另一个值。’==’用于判断两个值是否相等，’!=’则是查看两个值是否不相等。’&lt;=’和’&gt;=’是用于测试第二个值是否小于或等于或者大于或等于第一个值。</p><p>比较的结果只有一个，true或false。</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>通过reflect包中的TypeOf方法可以判断一个字面量的类型。</p><p>常见的类型及用途如下：</p><table><thead><tr><th align="center">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">int</td><td align="left">整型。保存数字。</td></tr><tr><td align="center">float64</td><td align="left">浮点数。保存带小数部分的数字（类型名中的64表示使用64位的数据来保存数字）。</td></tr><tr><td align="center">bool</td><td align="left">布尔值。只能是true或false。</td></tr><tr><td align="center">string</td><td align="left">字符串。通常表示文本字符的一系列数据。</td></tr></tbody></table><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><p>Go语言中，变量是包含值的一块存储。可以使用变声明为变量命名。只需要使用var关键字，后面跟上变量的名称以及变量保存的值的类型。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var -&gt; 关键字</span></span><br><span class="line"><span class="comment">// quantity -&gt; 变量名</span></span><br><span class="line"><span class="comment">// int -&gt; 变量类型</span></span><br><span class="line"><span class="keyword">var</span> quantity <span class="keyword">int</span></span><br></pre></td></tr></tbody></table></figure><p>一旦声明了变量，就可以使用’=’为它分配该类型的任何值。</p><p>可以再同一语句中为多个变量赋值。只需将多个变量名放在’=’的左侧，将相同数量的值放在右侧，并使用’,’分隔。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length, width = <span class="number">1.2</span>, <span class="number">2.4</span> <span class="comment">// 一次为多个变量赋值</span></span><br></pre></td></tr></tbody></table></figure><p>一旦给变量赋值以后，就可以在任何要使用原始值的上下文中使用它们，示例代码如下：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// 声明变量</span></span><br><span class="line">    <span class="keyword">var</span> quantity <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> length, width <span class="keyword">float64</span></span><br><span class="line">    <span class="keyword">var</span> customerName <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给变量赋值</span></span><br><span class="line">    quantity = <span class="number">4</span></span><br><span class="line">    length, width = <span class="number">1.2</span>, <span class="number">2.4</span></span><br><span class="line">    customerName = <span class="string">"Damon Cole"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用变量</span></span><br><span class="line">    fmt.Println(customerName)</span><br><span class="line">    fmt.Println(<span class="string">"has ordered"</span>, quantity, <span class="string">"sheets"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"each with an area of"</span>)</span><br><span class="line">    fmt.Println(length*width, <span class="string">"square meters"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果事先知道变量的值是什么，可以声明变量并一同赋值。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="keyword">var</span> quantity <span class="keyword">int</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> length, width <span class="keyword">float64</span> = <span class="number">1.2</span>, <span class="number">2.4</span></span><br><span class="line"><span class="keyword">var</span> customerName <span class="keyword">string</span> = <span class="string">"Damon Cole"</span></span><br></pre></td></tr></tbody></table></figure><p>为变量赋新值时必须是相同类型的值。Go的静态类型确保开发者不会意外地将错误类型的值赋给变量。</p><p>如果在声明变量的同时为其赋值，通常可以在声明中省略变量类型。分配给变量的值的类型将会自动作为该变量的类型。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略变量类型</span></span><br><span class="line"><span class="keyword">var</span> quantity = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> length, width = <span class="number">1.2</span>, <span class="number">2.4</span></span><br><span class="line"><span class="keyword">var</span> customerName = <span class="string">"Damon Cole"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h4><p>如果声明一个变量而没有赋值，那么该变量将包含其类型的零值。对于数值类型的变量，零值就是0。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myInt <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> myFloat <span class="keyword">float64</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* int、float64变量的零值就是 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>对于其他类型来说，0值是无效的，因此该类型的零值可能是其他值。比如，字符串变量的零值就是空字符串，布尔变量的零值就是false。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string变量的零值是空字符串</span></span><br><span class="line"><span class="keyword">var</span> myString <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool变量的零值是false</span></span><br><span class="line"><span class="keyword">var</span> myBool <span class="keyword">bool</span></span><br></pre></td></tr></tbody></table></figure><h4 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h4><p>前面提到过，可以声明变量并在同一行上为其赋值：</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="keyword">var</span> quantity <span class="keyword">int</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> length, width <span class="keyword">float64</span> = <span class="number">1.2</span>, <span class="number">2.4</span></span><br><span class="line"><span class="keyword">var</span> customerName <span class="keyword">string</span> = <span class="string">"Damon Cole"</span></span><br></pre></td></tr></tbody></table></figure><p>但是，如果在声明变量时就知道它的初始值是什么，那么更具有代表性的是使用短变量声明。不必很明确地声明变量的类型并在之后使用 “=” 为其赋值，而是同时使用”:=”。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// 声明变量并赋值</span></span><br><span class="line">    quantity := <span class="number">4</span></span><br><span class="line">    length, width := <span class="number">1.2</span>, <span class="number">2</span>,<span class="number">4</span></span><br><span class="line">    customerName := <span class="string">"Damon Cole"</span></span><br><span class="line"></span><br><span class="line">    fmt.Print(customerName)</span><br><span class="line">    fmt.Println(<span class="string">"has ordered"</span>, quantity, <span class="string">"sheets"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"each with an area of"</span>)</span><br><span class="line">    fmt.Println(length*width, <span class="string">"square meters"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>不需要明确地声明变量的类型；赋值给变量的值的类型成为该变量的类型。短变量声明非常方便和简洁，因此比常规声明更常用。</p><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p>Go中的数学运算和比较运算要求包含的值具有相同的类型。如果不是的话，则在尝试运行时代码会报错。</p><p>为变量分配新值也是如此。如果所赋值的类型与变量的声明类型不匹配，也会报错。</p><p>解决方法是使用转换，它允许将一种类型转换为另一种类型。只需要提供要将值转换成的类型，后面紧跟着是在圆括号中的要转换的值。结果是所需类型的新值。</p><figure class="highlight golang"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转换int到float64</span></span><br><span class="line"><span class="keyword">var</span> myInt <span class="keyword">int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">float64</span>(myInt)</span><br></pre></td></tr></tbody></table></figure><p>注意，在进行转换时坑你会更改结果值。例如，float64变量可以存储小数值，但是int变量不能。当将float64转换为int时，小数部分会被简单地删除。</p><h4 id="Go命名规则"><a href="#Go命名规则" class="headerlink" title="Go命名规则"></a>Go命名规则</h4><p>Go语言有一套简单的规则，适用于变量、函数和类型的名称：</p><ul><li>名称必须以字母开头，并且可以有任意数量的额外的字母和数字。</li><li>如果变量、函数或类型的名称以大写字母开头，则认为它是可导出的，可以从当前包之外的包访问它。如果是以小写字母开头的，则认为该名称是未导出的，只能在当前包中使用。</li><li>如果一个名称由多个单词组成，那么第一个单词之后的每个单词都应该首字母大写，并且单词应该连接在一起，中间没有其他连接符，如topPrice、RetryConnection等。</li></ul><h4 id="编译与运行Go代码"><a href="#编译与运行Go代码" class="headerlink" title="编译与运行Go代码"></a>编译与运行Go代码</h4><p>计算机不能直接运行Go代码。在运行之前，需要获取源代码文件并进行编译，将其转换为CPU可以执行的二进制格式。</p><p>go fmt xx.go –&gt; 整理代码格式<br>go build xx.go –&gt; 编译源代码<br>go run xx.go –&gt; 快速运行代码，但不进行编译</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Lists复习</title>
      <link href="ckmd4q4ii000346x9hosp4jto.html"/>
      <url>ckmd4q4ii000346x9hosp4jto.html</url>
      
        <content type="html"><![CDATA[<h4 id="什么是Lists（列表）"><a href="#什么是Lists（列表）" class="headerlink" title="什么是Lists（列表）"></a>什么是Lists（列表）</h4><p><b>列表：</b>以特定的顺序存储一系列数据。不管数据量是只有几个还是成千上万个，列表都在将数据存储在同一个地方。列表是重要的基础数据结构。</p><h5 id="定义一个列表"><a href="#定义一个列表" class="headerlink" title="定义一个列表"></a>定义一个列表</h5><p>一般通过”[]”来定义一个列表，在列表中用”,”分割数据。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 定义并初始化一个列表</span><br><span class="line">users = ['val', 'bob', 'mia', 'ron', 'ned']</span><br></pre></td></tr></tbody></table></figure><h5 id="访问列表中的数据"><a href="#访问列表中的数据" class="headerlink" title="访问列表中的数据"></a>访问列表中的数据</h5><p>列表中的书可以通过位置来进行访问，也就是通过数据在列表中的索引来访问。索引值是从0开始的。负的索引值是从列表结尾开始计算的，“-1”是最后一个数据。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取第一个数据</span><br><span class="line">first_user = users[0]</span><br><span class="line"></span><br><span class="line"># 获取最后一个数据</span><br><span class="line">last_user = users[-1]</span><br></pre></td></tr></tbody></table></figure><h5 id="修改列表中的数据"><a href="#修改列表中的数据" class="headerlink" title="修改列表中的数据"></a>修改列表中的数据</h5><p>直接通过赋值的方式来进行修改，通过“列表名[索引值]=更新值”的方式来修改。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user[0] = 'valerie'</span><br><span class="line">users[-2] = 'ronald'</span><br></pre></td></tr></tbody></table></figure><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><p>可通过append向列表中添加一个数据到列表中，也可以通过insert并指定插入位置进行数据添加，操作后列表向后扩展。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">users = [] # 定义一个空列表</span><br><span class="line"></span><br><span class="line"># 通过append添加一个数据</span><br><span class="line">users.append('val')</span><br><span class="line"></span><br><span class="line"># 通过insert并指定位置进行数据添加</span><br><span class="line">users.insert(0, 'joe') # 插入数据到第一个位置，原有的数据往后移一位</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><p>在列表中可通过位置来移除元素，或者通过元素的值来进行移除。如果通过值来进行移除时，只会移除第一个值为指定值的元素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 通过位置删除元素</span><br><span class="line">del users[-1] # 删除最后一个元素</span><br><span class="line"></span><br><span class="line"># 通过值来进行移除</span><br><span class="line">users.remove('mia')</span><br></pre></td></tr></tbody></table></figure><h5 id="弹出数据"><a href="#弹出数据" class="headerlink" title="弹出数据"></a>弹出数据</h5><p>如果移除的数据还需要参与其他操作时，可通过pop方法来实现。pop方法默认从列表尾部开始弹出元素，也可通过指定pop方法的参数来弹出指定位置的元素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 弹出最后一个元素</span><br><span class="line">last_user = users.pop()</span><br><span class="line">print(last_user)</span><br><span class="line"></span><br><span class="line"># 通过索引进行元素获取</span><br><span class="line">first_user = users.pop(0)</span><br><span class="line">print(first_user)</span><br></pre></td></tr></tbody></table></figure><h5 id="获取列表长度"><a href="#获取列表长度" class="headerlink" title="获取列表长度"></a>获取列表长度</h5><p>通过len方法可获取到列表中有多少个元素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_users = len(users)</span><br><span class="line"></span><br><span class="line">print(f"We have {num_users} users.")</span><br></pre></td></tr></tbody></table></figure><h5 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h5><p>sort方法在对列表进行排序时，返回一个新的根据排序条件排序后的新列表，原始列表中元素的顺序不改变。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 对列表进行正序排序</span><br><span class="line">users.sort()</span><br><span class="line"></span><br><span class="line"># 对列表进行逆序排序</span><br><span class="line">users.sort(reverse=True)</span><br><span class="line"></span><br><span class="line"># 另一种逆序排序的方法</span><br><span class="line">users.reverse()</span><br></pre></td></tr></tbody></table></figure><h5 id="循环访问列表的元素"><a href="#循环访问列表的元素" class="headerlink" title="循环访问列表的元素"></a>循环访问列表的元素</h5><p>通过for循环访问列表中的每一个元素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for user in users:</span><br><span class="line">    print(user)</span><br></pre></td></tr></tbody></table></figure><h5 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h5><p>可通过循环和range函数生成一个列表，也可以通过列表生成式生成。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 通过循环生成</span><br><span class="line">squares = []</span><br><span class="line">for x in range(1, 11):</span><br><span class="line">    squares.append(x**2)</span><br><span class="line"></span><br><span class="line"># 通过列表生成式</span><br><span class="line">squares = [x**2 for x in range(1, 11)]</span><br></pre></td></tr></tbody></table></figure><h5 id="简单统计"><a href="#简单统计" class="headerlink" title="简单统计"></a>简单统计</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ages = [93, 92, 99, 66, 17, 85, 1, 35, 82, 2, 77]</span><br><span class="line"># 获取最小值</span><br><span class="line">youngest = min(ages)</span><br><span class="line"></span><br><span class="line"># 获取最大值</span><br><span class="line">oldest = max(ages)</span><br><span class="line"></span><br><span class="line"># 获取所有元素的和</span><br><span class="line">total = sum(ages)</span><br></pre></td></tr></tbody></table></figure><h5 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h5><p>通过索引获取到列表的切片数据，生成新的子列表。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">finisthers = ['kai', 'abe', 'ada', 'gus', 'zoe']</span><br><span class="line"></span><br><span class="line"># 获取前3个元素的子列表</span><br><span class="line">first_three = finishers[:3]</span><br><span class="line"></span><br><span class="line"># 获取最后三个</span><br><span class="line">last_three = finishers[-3:]</span><br><span class="line"></span><br><span class="line"># 获取中间三个</span><br><span class="line">middle_three = finishers[1:4]</span><br></pre></td></tr></tbody></table></figure><h4 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h4><ul><li>使用4个空格作为缩进</li><li>保持每一行只有79个字符</li><li>使用单行空行分隔代码块</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识复习</title>
      <link href="ckmd4q4io000c46x96e6n2gx0.html"/>
      <url>ckmd4q4io000c46x96e6n2gx0.html</url>
      
        <content type="html"><![CDATA[<h4 id="变量-Variables-和字符串-Strings"><a href="#变量-Variables-和字符串-Strings" class="headerlink" title="变量(Variables)和字符串(Strings)"></a>变量(Variables)和字符串(Strings)</h4><p><b>变量:</b>用于存储值。</p><p><b>字符串:</b>是一串字符的集合，由单引号对(‘’)、双引号对(“”)或者三引号对(可以是连续三个单引号或双引号)包围。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 直接打印 Hello World</span><br><span class="line">print('Hello World')</span><br><span class="line"></span><br><span class="line"># 通过变量打印</span><br><span class="line">msg = 'Hello World'</span><br><span class="line">print(msg)</span><br><span class="line"></span><br><span class="line"># Python3.6之后新添加的特性 f-string，在变量中使用字符串</span><br><span class="line">first_name = 'albert'</span><br><span class="line">last_name = 'einstein'</span><br><span class="line">full_name = f"{first_name} {last_name}"</span><br><span class="line">print(full_name)</span><br></pre></td></tr></tbody></table></figure><h4 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表(Lists)"></a>列表(Lists)</h4><p><b>列表：</b>通过特殊的顺序存储一系列值。可通过索引或者循环的方式访问列表中保存的值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个列表</span><br><span class="line">bikes = ['trek', 'redline', 'giant']</span><br><span class="line"></span><br><span class="line"># 获取列表的第一个值</span><br><span class="line">first_bike = bikes[0]</span><br><span class="line"></span><br><span class="line"># 获取列表中的最后一个值</span><br><span class="line">last_bike = bikes[-1]</span><br><span class="line"></span><br><span class="line"># 通过循环打印列表中的值</span><br><span class="line">for bike in bikes:</span><br><span class="line">    print(bike)</span><br><span class="line"></span><br><span class="line"># 添加数据到列表</span><br><span class="line">bikes = []</span><br><span class="line">bikes.append('trek')</span><br><span class="line">bikes.append('redline')</span><br><span class="line">bikes.append('giant')</span><br><span class="line"></span><br><span class="line"># 生成一个数字列表</span><br><span class="line">squares = []</span><br><span class="line">for x in range(1, 11):</span><br><span class="line">    squares.append(x**2)</span><br><span class="line"></span><br><span class="line"># 列表生成式</span><br><span class="line">squares = [x**2 for x in range(1, 11)]</span><br><span class="line"></span><br><span class="line"># 列表切片</span><br><span class="line">finishers = ['sam', 'bob', 'ada', 'bea']</span><br><span class="line">first_two = finishers[:2]</span><br><span class="line"></span><br><span class="line"># 复制列表</span><br><span class="line">copy_of_bikes = bikes[:]</span><br></pre></td></tr></tbody></table></figure><h4 id="元组-tuples"><a href="#元组-tuples" class="headerlink" title="元组(tuples)"></a>元组(tuples)</h4><p><b>元组：</b>与列表类似，但元组中的数据是不可变的，也就是说一个元组在初始化以后，就不能改变其中的值，包括删除，添加，更新等。如果元组中存储的值是可变的（如列表），在对可变值进行操作后就生成了新的元组，跟原来的元组就不是同一个内存值了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个元组</span><br><span class="line">dimensions = (1920, 1080)</span><br></pre></td></tr></tbody></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p><b>字典：</b>存储序列之间的关系。字典中的每一个项是一个key-value对。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 生成字典</span><br><span class="line">alien = {'color': 'green', 'points': 5}</span><br><span class="line"></span><br><span class="line"># 访问一个项的值</span><br><span class="line">print(f"The alien's color is {alien['color']}")</span><br><span class="line"></span><br><span class="line"># 往字典中添加新的key-value对</span><br><span class="line">alien['x_position'] = 0</span><br><span class="line"></span><br><span class="line"># 通过循环访问字典中的所有项</span><br><span class="line">fav_numbers = {'eric': 17, 'ever': 4}</span><br><span class="line">for name, number in fav_numbers.items():</span><br><span class="line">    print(f"{name} loves {number}")</span><br><span class="line"></span><br><span class="line"># 只获取key的值</span><br><span class="line">for name in fav_numbers.keys():</span><br><span class="line">    print(f"{name} loves a number")</span><br><span class="line"></span><br><span class="line"># 只获取所有的value值</span><br><span class="line">for number in fav_numbers.values():</span><br><span class="line">    print(f"{number} is favorite")</span><br></pre></td></tr></tbody></table></figure><h4 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h4><p>程序可通过input函数接收用户的输入，所有的输入数据都被存储在字符串中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 提示用户输入一个值</span><br><span class="line">name = input("What's your name? ")</span><br><span class="line">print(f"Hello {name}")</span><br><span class="line"></span><br><span class="line"># 提示用户输入一个数字</span><br><span class="line">age = input("How old are you？ ")</span><br><span class="line"></span><br><span class="line"># 将字符类型转换为整数型</span><br><span class="line">age = int(age)</span><br><span class="line"></span><br><span class="line"># 提示用户输入一个小数</span><br><span class="line">pi = input("Waht's the value of pi? ")</span><br><span class="line">pi = float(pi)</span><br></pre></td></tr></tbody></table></figure><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p><b>if语句：</b>用于测试特定的条件并做出适当的响应（即执行对应的代码）。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">"""</span><br><span class="line"># 条件</span><br><span class="line"># 等于</span><br><span class="line">x == 42</span><br><span class="line"></span><br><span class="line"># 不等于</span><br><span class="line">x != 42</span><br><span class="line"></span><br><span class="line"># 大于</span><br><span class="line">x &gt; 42</span><br><span class="line"></span><br><span class="line"># 大于等于</span><br><span class="line">x &gt;= 42</span><br><span class="line"></span><br><span class="line"># 小于</span><br><span class="line">x &lt; 42</span><br><span class="line"></span><br><span class="line"># 小于等于</span><br><span class="line">x &lt;= 42</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"># 通过列表来判断条件</span><br><span class="line">'trek' in bikes # return True</span><br><span class="line">'surly' in bikes # return False</span><br><span class="line"></span><br><span class="line"># 将boolean值赋值给变量</span><br><span class="line">game_active = True</span><br><span class="line">can_edit = False</span><br><span class="line"></span><br><span class="line"># 简单条件判断</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print("You can vote!")</span><br><span class="line"># 如果只有单个条件，后续的代码就不需要了</span><br><span class="line">else:</span><br><span class="line">    print(You can't vote!")</span><br><span class="line"></span><br><span class="line"># if-elif-else语句</span><br><span class="line">if age &lt; 4:</span><br><span class="line">    ticket_price = 0</span><br><span class="line">elif age &lt; 18:</span><br><span class="line">    ticket_price = 10</span><br><span class="line">else:</span><br><span class="line">    ticket_price = 15</span><br></pre></td></tr></tbody></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while循环按照特定的条件对一块代码块进行重复执行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 一个简单的while循环</span><br><span class="line">current_value = 1</span><br><span class="line">while current_value &lt;= 5:</span><br><span class="line">    print(current_value)</span><br><span class="line">    current_value += 1</span><br><span class="line"></span><br><span class="line"># 根据用户的特定输入来结束循环</span><br><span class="line">msg = ''</span><br><span class="line">while msg!='quit':</span><br><span class="line">    msg = input("What's your messag? ")</span><br><span class="line">    print(msg)</span><br></pre></td></tr></tbody></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for循环用于遍历可迭代访问数据中的所有数据。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 简单的for循环</span><br><span class="line">a_list = ['a', 'b', 'c']</span><br><span class="line">for item in a_list:</span><br><span class="line">    print(item)</span><br></pre></td></tr></tbody></table></figure><h4 id="functions-函数"><a href="#functions-函数" class="headerlink" title="functions - 函数"></a>functions - 函数</h4><p>函数是一段代码块的名字，用于完成特定的工作。传递给函数的值被称为argument，函数中接收argument的值被称为parameter。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 声明一个简单的函数</span><br><span class="line">def greet_user():</span><br><span class="line">    """</span><br><span class="line">    一个无参数的函数，用于打印一个简单的问候语。</span><br><span class="line">    """</span><br><span class="line">    print('Hello')</span><br><span class="line">greet_user()</span><br><span class="line"></span><br><span class="line"># 传递一个argument给函数</span><br><span class="line">def greet_user(name):</span><br><span class="line">    """</span><br><span class="line">    带参数的函数，name被成为parameter，调用函数传入的值被成为argument</span><br><span class="line">    """</span><br><span class="line">    print(f"Hello, {name}")</span><br><span class="line">greet_user('jesse')</span><br><span class="line"></span><br><span class="line"># parameter带默认值的函数，带默认值的参数在声明函数时一般放在不带默认值的参数后面</span><br><span class="line">def make_pizza(size:int, topping: str='bacon'):</span><br><span class="line">    print(f"Have a {size} {topping} pizza!")</span><br><span class="line">make_pizza(5) # topping使用默认值</span><br><span class="line"></span><br><span class="line">make_pizza(6, 'pepperoni') # topping使用传入的值</span><br><span class="line"></span><br><span class="line"># 带返回值的函数</span><br><span class="line">def add_number(x: int, y: int) -&gt; int:</span><br><span class="line">    """</span><br><span class="line">    两个整数相加，并返回相加之后的和。</span><br><span class="line">    """</span><br><span class="line">    return x+y</span><br><span class="line">sum = add_number(3, 5)</span><br><span class="line">print(sum)</span><br></pre></td></tr></tbody></table></figure><h4 id="class-类"><a href="#class-类" class="headerlink" title="class - 类"></a>class - 类</h4><p><b>类：</b>用来定义一个object的特性和属性。一个具体类的信息存储在attributes中。类中的函数被称作方法。一个子类可以继承父类的属性和方法。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个简单的类</span><br><span class="line">class Dog:</span><br><span class="line">    """</span><br><span class="line">    # 类说明，用于写注释</span><br><span class="line">    """</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        """</span><br><span class="line">        # 注释</span><br><span class="line">        """</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def sit(self):</span><br><span class="line">        """</span><br><span class="line">        # 注释</span><br><span class="line">        """</span><br><span class="line">        print(f"{self.name} is sitting!")</span><br><span class="line"></span><br><span class="line">my_dog = Dog('Peso') # 实现一个类实例</span><br><span class="line">print(f"{my_dog.name} is a great dog”)</span><br><span class="line">my_dog.sit()</span><br><span class="line"></span><br><span class="line"># 子类继承父类</span><br><span class="line">class SARDog(Dog):</span><br><span class="line">    """</span><br><span class="line">    """</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        """</span><br><span class="line">        """</span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    def search(self):</span><br><span class="line">        """</span><br><span class="line">        """</span><br><span class="line">        print(f"{self.name} is searching.")</span><br><span class="line"></span><br><span class="line">new_dog = SARDog('Willie')</span><br><span class="line"></span><br><span class="line">print(f"{new_dog.name} is a search dog.")</span><br><span class="line">new_dog.sit()</span><br><span class="line">new_dog.search()</span><br></pre></td></tr></tbody></table></figure><h4 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h4><p>文件可以通过open方式以读(‘r’)、写(‘w’)和追加(‘a’)的方式来打开。注意一点，对于文件中的内容，需要指定encoding编码方式。默认方式为读。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 读文件，并存储其中的内容</span><br><span class="line">filename = 'siddhartha.txt'</span><br><span class="line"></span><br><span class="line">with open(filename, encoding='utf-8') as file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line"># 通过追加的方式写文件，如果用写的方式的话会覆盖掉之前的内容</span><br><span class="line">filename = 'journal.txt'</span><br><span class="line">with open(filename, 'a', encoding='utf-8') as file_object:</span><br><span class="line">    file_object.write('\nI love Python.")</span><br></pre></td></tr></tbody></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>如果在程序中不进行异常处理，程序会退出。比如在写爬虫时，如果一个地址无法访问到，程序中也没有对此异常进行处理，那程序退出后，已爬取的地址又得再爬一次。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">promt = "How many tickets do you need？"</span><br><span class="line">num_tickets = input(promt)</span><br><span class="line"></span><br><span class="line">try: # 尝试执行代码</span><br><span class="line">    num_tickets = int(num_tickets)</span><br><span class="line">except ValueError:</span><br><span class="line">    print("Please try again.")</span><br><span class="line">else:</span><br><span class="line">    print("Your tickets are printing.")</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年的小计划</title>
      <link href="ckmd4q4ig000146x98zlsbp2t.html"/>
      <url>ckmd4q4ig000146x98zlsbp2t.html</url>
      
        <content type="html"><![CDATA[<p>在不知不觉中之中，2020悄然的流逝，留下了一地鸡毛，2021也快过去了一个季度，现在回头想想，除了头上的白发和身上的肥肉，感觉什么都没有得到。</p><p>时间总是不留任何情面，无论你是谁。</p><p>工作也快要有8年了，很多时候都感觉自己什么也不会，也曾想过万一哪一天失业了，自己还能做什么来养活自己和家人呢？</p><p>经过一些事，也算是彻底的理清了自己未来想要做什么，想要依靠什么来安身立命。痛定思痛，给自己立下了如下的Flag，希望2021年总的时候不要反过来打脸，再把Flag往下延。</p><p>Flag如下：</p><ul><li><ol><li>复习Python核心知识、完成Go语言的学习</li></ol></li><li><ol start="2"><li>系统的学习NLP技术，同时补深度学习、传统机器学习的理论</li></ol></li><li><ol start="3"><li>完成2-3个基于AI技术的安全工具</li></ol></li><li><ol start="4"><li>坚持学习算法并刷题</li></ol></li><li><ol start="5"><li>坚持写Blog，记录自己的技术成长之路</li></ol></li><li><ol start="6"><li>最最重要的是要早睡和锻炼身体</li></ol></li></ul><p>想了很多，可写出来的却很少，废话不多说，努力吧！中年男子。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
